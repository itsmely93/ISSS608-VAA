[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of the pacman package to check if the tidyverse packages are installed on the computer. If they are, they will then be loaded into the R environment.\n\n\nClick to show/hide the code\npacman::p_load(tidyverse)\n\n\n\n\n\nTo import the data “Exam_data.csv” into the R environment, read_csv() of the readr package is used, as seen in the code chunk below.\n\n\nClick to show/hide the code\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "A layered grammar of graphics",
    "text": "A layered grammar of graphics"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-1-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-1-data",
    "title": "Hands-on Exercise 1",
    "section": "Step 1: Data",
    "text": "Step 1: Data\n\n\nClick to show/hide the code\nggplot(data = exam_data)\n\n\n\n\n\nggplot() initializes a ggplot object, and the data argument defines the data set to be used. However, since the aesthetics and geometries are not defined yet, the canvas will be blank."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-2-aesthetics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-2-aesthetics",
    "title": "Hands-on Exercise 1",
    "section": "Step 2: Aesthetics",
    "text": "Step 2: Aesthetics\nThe code chunk below adds the aesthetic element into the plot:\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS))\n\n\n\n\n\nAs seen from the plot, the x-axis and the axis’s label are added. To add the charts, we need to proceed to Step 3."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-3-geometries",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-3-geometries",
    "title": "Hands-on Exercise 1",
    "section": "Step 3: Geometries",
    "text": "Step 3: Geometries\n\n1. Bar chart (geom_bar())\n\n\nClick to show/hide the code\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n2. Dot plot (geom_dotplot())\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) + \n  geom_dotplot(binwidth = 2.5, dotsize = 0.5) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nscale_y_continuous is used to remove the y-axis.\n\n\n\n\n3. Histogram (geom_histogram())\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram()\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBy default, the bin width is 30.\n\n\n\n\nModifying the histogram by changing geom()\nIn the code chunk below:\n\nbins argument is used to change the number of bins to 20\ncolor argument is used to change the outline color of the histogram to black\nfill argument is used to change the fill color of the histogram to violet\n\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, color = \"black\", fill = \"violet\")\n\n\n\n\n\n\n\n\nModifying the histogram by changing aes()\nThe code chunk below changes the fill color of the histogram using the subgroup of aes(), which in this case, is the gender of the students.\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS, fill = GENDER)) +\n  geom_histogram(bins = 20, color = \"grey30\")\n\n\n\n\n\n\n\n\n4. Kernel density estimate (geom_density())\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_density()\n\n\n\n\n\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS, color = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n5. Boxplot (geom_boxplot())\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = GENDER, y = MATHS)) +\n  geom_boxplot()\n\n\n\n\n\nNotches can be added to help visually assess whether the median of the distributions differ:\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = GENDER, y = MATHS)) +\n  geom_boxplot(notch = TRUE)\n\n\n\n\n\n\n\n6. Violin plot (geom_violin())\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = GENDER, y = MATHS)) +\n  geom_violin()\n\n\n\n\n\n\n\n7. Scatter plot (geom_point())\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n8. Combining multiple plots\nThe code chunk below plots the data points on the boxplots using geom_point() and geom_boxplot.\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = GENDER, y = MATHS)) +\n  geom_boxplot() +\n  geom_point(position = \"jitter\", size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-4-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-4-facets",
    "title": "Hands-on Exercise 1",
    "section": "Step 4: Facets",
    "text": "Step 4: Facets\nThere are two types of facets supported by ggplot2, namely facet_grid() and facet_wrap().\n\nSplitting with facet_grid()\nThe data can be split by one or two variables, either in the horizontal or vertical direction. This is done by giving a formula to facet_grid(), of the form vertical ~ horizontal\n\nVertical split\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_grid(GENDER ~ .)\n\n\n\n\n\n\n\nHorizontal split\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_grid(~ GENDER)\n\n\n\n\n\n\n\nVertical and Horizontal split\nThe code chunk below splits vertically by GENDER, and horizontally by RACE.\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_grid(GENDER ~ RACE)\n\n\n\n\n\n\n\n\nSplitting with facet_wrap\nInstead of faceting with variables in the horizontal or vertical direction, facet_wrap wraps the panels into a matrix.\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_wrap(~ CLASS)\n\n\n\n\n\n\nSpecifying number of columns or rows to wrap\nYou can also specify the number of columns or rows to wrap the facets, using ncol or nrow\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_wrap(~ CLASS, ncol = 2)\n\n\n\n\n\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_wrap(~ CLASS, nrow = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-5-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-5-statistics",
    "title": "Hands-on Exercise 1",
    "section": "Step 5: Statistics",
    "text": "Step 5: Statistics\nThere are two methods to work with statistics: using the stat_summary() method or the geom() method.\n\nThe stat_summary() method\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = GENDER, y = MATHS)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",\n               fun = \"mean\",\n               color = \"red\",\n               size = 4)\n\n\n\n\n\n\n\nThe geom() method\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = GENDER, y = MATHS)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",\n             fun = \"mean\",\n             color = \"red\",\n             size = 4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-6-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-6-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "Step 6: Coordinates",
    "text": "Step 6: Coordinates\n\nFlipping the coordinates\nBy default, the bar chart of ggplot2 is in the vertical orientation, as seen earlier in “Step 3”.\nTo flip the coordinates (so that the bar chart is in a horizontal orientation), coord_flip is used.\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = RACE)) +   \n  geom_bar() +   \n  coord_flip()\n\n\n\n\n\n\n\nChanging the limits of the x and y axes\nThe following scatter plot shows the default limits of the x and y axes. However, as the range is not equal, it can be quite misleading.\n\n\nClick to show/hide the code\nggplot(data=exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nIn order to define the limits of the axes, coord_cartesian is used. The following code chunk fixes the range of limits of both axes to 0 - 100.\n\n\nClick to show/hide the code\nggplot(data=exam_data, aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5) +  \n  coord_cartesian(xlim=c(0,100), ylim=c(0,100))\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-7-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-7-theme",
    "title": "Hands-on Exercise 1",
    "section": "Step 7: Theme",
    "text": "Step 7: Theme\nThemes allow us to change the appearance of the charts, and are not related to the data itself. Some of the elements that can be modified with themes include background color, font size, grid lines etc.\nSome of the built-in themes include: theme_gray() (default), theme_bw(), theme_classic(), theme_minimal.\nThe following code chunks are some examples of what the different built-in themes look like.\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = RACE)) +\n  geom_bar() +\n  theme_classic()\n\n\n\n\n\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = RACE)) +\n  geom_bar() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "For this exercise, besides tidyverse, four R packages will be used, namely ggrepel, ggthemes, hrbrthemes and patchwork.\nThe code chunk below uses p_load() of the pacman package to check if all the packages are installed on the computer. If they are, they will then be loaded into the R environment.\n\n\nClick to show/hide the code\npacman::p_load(ggrepel, ggthemes, hrbrthemes, patchwork, tidyverse)\n\n\n\n\n\nTo import the data “Exam_data.csv” into the R environment, read_csv() of the readr package is used, as seen in the code chunk below.\n\n\nCode\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#built-in-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#built-in-themes",
    "title": "Hands-on Exercise 2",
    "section": "Built-in themes",
    "text": "Built-in themes\nThere are 8 built-in themes that comes with ggplot2, namely theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal() and theme_void().\nThe following code chunk is an example using theme_gray().\n\n\nClick to show/hide the code\nggplot(exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths Scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggthemes-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggthemes-package",
    "title": "Hands-on Exercise 2",
    "section": "ggthemes package",
    "text": "ggthemes package\nThe ggthemes package contains themes that replicate the look of plots by ‘The Wall Street Journal’, ‘The Economist’ etc.\nThe following code chunk demonstrates an example using The Economist theme.\n\n\nClick to show/hide the code\nggplot(exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n  theme_economist() +\n  ggtitle(\"Distribution of Maths Scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#hrbrthemes-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#hrbrthemes-package",
    "title": "Hands-on Exercise 2",
    "section": "hrbrthemes package",
    "text": "hrbrthemes package\nThe hrbrthemes package contains themes that are typography-centric.\n\n\nClick to show/hide the code\nggplot(exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n  theme_ipsum() +\n  ggtitle(\"Distribution of Maths Scores\")\n\n\n\n\n\nWe can also modify the appearance of the theme, as seen in the code chunk below.\n\n\nClick to show/hide the code\nggplot(exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n  theme_ipsum(axis_title_size = 18, base_size = 15, grid = \"Y\") +\n  ggtitle(\"Distribution of Maths Scores\")\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\naxis_title_size is used to change the font size of the axis title to 18.\nbase size is used to increase the size of the axis label to 15.\ngrid = \"Y\" will only display grid lines along the Y-axis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-separate-plots",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-separate-plots",
    "title": "Hands-on Exercise 2",
    "section": "Creating separate plots",
    "text": "Creating separate plots\nFirst, we will create the individual plots, assigning each plot to a variable name.\n\n\nClick to show/hide the code\np1 <- ggplot(exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of Maths Scores\")\np1\n\n\n\n\n\n\n\nClick to show/hide the code\np2 <- ggplot(exam_data, aes(x = ENGLISH)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of English Scores\")\np2\n\n\n\n\n\n\n\nClick to show/hide the code\np3 <- ggplot(exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, linewidth = 0.5) +\n  coord_cartesian(xlim = c(0,100), ylim = c(0,100)) +\n  ggtitle(\"English Scores vs Maths Scores for Primary 3\")\np3\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-multiple-plots-using-patchwork-1",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-multiple-plots-using-patchwork-1",
    "title": "Hands-on Exercise 2",
    "section": "Combining multiple plots using patchwork",
    "text": "Combining multiple plots using patchwork\n\nCombining two plots\n\nGeneral Syntax\n\n“+” sign: Combines two plots to form a two-column layout (i.e. side-by-side)\n“/” sign: Combines two plots to form a two-row layout (i.e. top and bottom)\n“()”: to create subplot groups\n\n\n\nClick to show/hide the code\np1 + p2\n\n\n\n\n\n\n\nClick to show/hide the code\np1 / p2\n\n\n\n\n\n\n\n\nCombining three plots\n\nAdditional syntax\nIn addition to the aforementioned operators, we can use “|” to place the plots beside each other. The following code chunk demonstrates the use of appropriate operators to combine three plots together.\n\n\nClick to show/hide the code\n(p1 / p2) | p3\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nTagging subplots\npatchwork allows auto-tagging of subplots to enable easy identification of each subplot.\n\n\nClick to show/hide the code\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = \"a\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nCreating figures with inserts\nWe can also use inset_element() to insert plots into another plot.\n\n\nClick to show/hide the code\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of the pacman package to check if the tidyverse packages are installed on the computer. If they are, they will then be loaded into the R environment.\n\n\nClick to show/hide the code\npacman::p_load(tidyverse)\n\n\n\n\n\nTo import the data “Exam_data.csv” into the R environment, read_csv() of the readr package is used, as seen in the code chunk below.\n\n\nClick to show/hide the code\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design",
    "title": "In-class Exercise 1",
    "section": "The original design",
    "text": "The original design\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\n\nCriticisms:\n1. y-axis label is not clear\n2. For effective comparison, the bars should be sorted according to their respective frequencies\n3. For static charts, frequency values should be included for additional information"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design",
    "title": "In-class Exercise 1",
    "section": "Modifying the design",
    "text": "Modifying the design\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = reorder(RACE, RACE, function(x)-length(x)))) +\n  geom_bar() +\n  geom_text(stat = \"count\", \n      aes(label = paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of pupils\") +\n  ylim(0,220) +\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\ngeom_text() is used to add the labels above the chart.\n\npaste0(after_stat(count)) - to add the total count.\nround(after_stat(count)/sum(after_stat(count))*100, 1), \"%\") - to add the percentage.\nafter_stat(count) is the newer version of ..count.., which has been deprecated in the later version of ggplot2.\n\nxlab and ylab are used to add the axes labels.\n\naxis.title.y is used to modify the y-axis’s label\nelement_text() is used to modify the looks of the texts. In this case, it is used to rotate the y-axis label to 0 degrees (i.e. horizontal orientation)."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-1",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-1",
    "title": "In-class Exercise 1",
    "section": "The original design",
    "text": "The original design\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design-1",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design-1",
    "title": "In-class Exercise 1",
    "section": "Modifying the design",
    "text": "Modifying the design\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, color = \"black\", fill = \"lightblue\") +\n  geom_vline(aes(xintercept = mean(MATHS, na.rm = T)), color = \"red\", linetype = \"dashed\", linewidth = 1) +\n  geom_vline(aes(xintercept = median(MATHS, na.rm = T)), color = \"grey30\", linetype = \"dashed\", linewidth = 1)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\ngeom_vline() creates a vertical line, which will intercept the x-axis."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-2",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-2",
    "title": "In-class Exercise 1",
    "section": "The original design",
    "text": "The original design\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = ENGLISH)) +\n  geom_histogram() +\n  facet_wrap (~ GENDER)\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design-2",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design-2",
    "title": "In-class Exercise 1",
    "section": "Modifying the design",
    "text": "Modifying the design\n\n\nClick to show/hide the code\ndata_bg <- exam_data[,-3]\n\nggplot(data = exam_data, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = data_bg, fill = \"grey\", alpha = 0.5) +\n  geom_histogram(color = \"black\") +\n  facet_wrap (~ GENDER) +\n  theme_bw()\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe chart is created by combining two histograms.\nThe histogram in the background shows the total with the transparency adjusted to 50% using alpha, while the histogram in the foreground is split by GENDER using facet_wrap()."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-3",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-3",
    "title": "In-class Exercise 1",
    "section": "The original design",
    "text": "The original design\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design-3",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design-3",
    "title": "In-class Exercise 1",
    "section": "Modifying the design",
    "text": "Modifying the design\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim = c(0,100), ylim = c(0,100)) +\n  geom_vline(xintercept = 50, color = \"grey60\", linetype = \"dashed\", linewidth = 1) +\n  geom_hline(yintercept = 50, color = \"grey60\", linetype = \"dashed\", linewidth = 1)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\ngeom_vline() is used to create a vertical line as mentioned previously.\nTo create a horizontal line, geom_hline() and yintercept is used instead.\ncoord_cartesian() allows us to modify the limits of the x and y axes, in this case, to range from 0 - 100."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "LY’s Visual Analytics Adventure 💯",
    "section": "",
    "text": "Hello there! Welcome to my exciting voyage into the captivating realm that is ISSS608 Visual Analytics and Applications! This website serves as a compass for navigating through the coursework that I have prepared for this course.\nJoin me as we journey into the depths of data visualization, delving into its intricate details and unearthing priceless nuggets of insights and revelations."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "For this exercise, besides tidyverse, four R packages will be used, namely ggiraph, plotly, DT and patchwork.\n\nggiraph: for making ggplot2 graphics interactive\nplotly: for plotting interactive statistical charts.\nDT: for creating data tables\n\nThe code chunk below uses p_load() of the pacman package to check if all the packages are installed on the computer. If they are, they will then be loaded into the R environment.\n\n\nClick to show/hide the code\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)\n\n\n\n\n\nTo import the data “Exam_data.csv” into the R environment, read_csv() of the readr package is used, as seen in the code chunk below.\n\n\nCode\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aestheitc",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aestheitc",
    "title": "Hands-on Exercise 3",
    "section": "Tooltip effect with tooltip aestheitc",
    "text": "Tooltip effect with tooltip aestheitc\nThe code chunk below is used to plot an interactive statistical graph using the ggiraph package.\n\n\nCode\n# first plot the ggplot object using `geom_dotplot_interactive`\np <- ggplot(exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# use `girafe()` of ggiraph to generate an interactive svg object\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\nHover over each data point to see the student’s ID"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-multiple-information-on-tooltip",
    "title": "Hands-on Exercise 3",
    "section": "Displaying multiple information on tooltip",
    "text": "Displaying multiple information on tooltip\n\n\nCode\n# customize the tooltip\nexam_data$tooltip <- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class = \", exam_data$CLASS))\n\n# plot the dotplot\np <- ggplot(exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# use `girafe()` of ggiraph to generate an interactive svg object\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\nHover over each data point to see the student’s ID and class."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#customising-tooltip-style",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#customising-tooltip-style",
    "title": "Hands-on Exercise 3",
    "section": "Customising Tooltip style",
    "text": "Customising Tooltip style\nThe code chunk below uses opts_tooltip() to customise the tooltip\n\n\nCode\n# use CSS to modify tooltip appearance\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:black;\" #<< \n\n# plot the dotplot\np <- ggplot(exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# use `opts_tooltip` to change tooltip appearance\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list( #<<\n    opts_tooltip( #<<\n      css = tooltip_css)) #<<\n)\n\n\n\n\n\n\nData points now have a white background and black font"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#displaying-statistics-on-tooltip",
    "title": "Hands-on Exercise 3",
    "section": "Displaying statistics on tooltip",
    "text": "Displaying statistics on tooltip"
  }
]