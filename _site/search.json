[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\nCode\n1 + 1\n\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of the pacman package to check if the tidyverse packages are installed on the computer. If they are, they will then be loaded into the R environment.\n\n\nClick to show/hide the code\npacman::p_load(tidyverse)\n\n\n\n\n\nTo import the data “Exam_data.csv” into the R environment, read_csv() of the readr package is used, as seen in the code chunk below.\n\n\nClick to show/hide the code\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#a-layered-grammar-of-graphics",
    "title": "Hands-on Exercise 1",
    "section": "A layered grammar of graphics",
    "text": "A layered grammar of graphics"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-1-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-1-data",
    "title": "Hands-on Exercise 1",
    "section": "Step 1: Data",
    "text": "Step 1: Data\n\n\nClick to show/hide the code\nggplot(data = exam_data)\n\n\n\n\n\nggplot() initializes a ggplot object, and the data argument defines the data set to be used. However, since the aesthetics and geometries are not defined yet, the canvas will be blank."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-2-aesthetics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-2-aesthetics",
    "title": "Hands-on Exercise 1",
    "section": "Step 2: Aesthetics",
    "text": "Step 2: Aesthetics\nThe code chunk below adds the aesthetic element into the plot:\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS))\n\n\n\n\n\nAs seen from the plot, the x-axis and the axis’s label are added. To add the charts, we need to proceed to Step 3."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-3-geometries",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-3-geometries",
    "title": "Hands-on Exercise 1",
    "section": "Step 3: Geometries",
    "text": "Step 3: Geometries\n\n1. Bar chart (geom_bar())\n\n\nClick to show/hide the code\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n2. Dot plot (geom_dotplot())\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) + \n  geom_dotplot(binwidth = 2.5, dotsize = 0.5) +\n  scale_y_continuous(NULL, breaks = NULL)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nscale_y_continuous is used to remove the y-axis.\n\n\n\n\n3. Histogram (geom_histogram())\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram()\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nBy default, the bin width is 30.\n\n\n\n\nModifying the histogram by changing geom()\nIn the code chunk below:\n\nbins argument is used to change the number of bins to 20\ncolor argument is used to change the outline color of the histogram to black\nfill argument is used to change the fill color of the histogram to violet\n\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, color = \"black\", fill = \"violet\")\n\n\n\n\n\n\n\n\nModifying the histogram by changing aes()\nThe code chunk below changes the fill color of the histogram using the subgroup of aes(), which in this case, is the gender of the students.\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS, fill = GENDER)) +\n  geom_histogram(bins = 20, color = \"grey30\")\n\n\n\n\n\n\n\n\n4. Kernel density estimate (geom_density())\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_density()\n\n\n\n\n\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS, color = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n5. Boxplot (geom_boxplot())\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = GENDER, y = MATHS)) +\n  geom_boxplot()\n\n\n\n\n\nNotches can be added to help visually assess whether the median of the distributions differ:\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = GENDER, y = MATHS)) +\n  geom_boxplot(notch = TRUE)\n\n\n\n\n\n\n\n6. Violin plot (geom_violin())\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = GENDER, y = MATHS)) +\n  geom_violin()\n\n\n\n\n\n\n\n7. Scatter plot (geom_point())\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point()\n\n\n\n\n\n\n\n8. Combining multiple plots\nThe code chunk below plots the data points on the boxplots using geom_point() and geom_boxplot.\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = GENDER, y = MATHS)) +\n  geom_boxplot() +\n  geom_point(position = \"jitter\", size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-4-facets",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-4-facets",
    "title": "Hands-on Exercise 1",
    "section": "Step 4: Facets",
    "text": "Step 4: Facets\nThere are two types of facets supported by ggplot2, namely facet_grid() and facet_wrap().\n\nSplitting with facet_grid()\nThe data can be split by one or two variables, either in the horizontal or vertical direction. This is done by giving a formula to facet_grid(), of the form vertical ~ horizontal\n\nVertical split\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_grid(GENDER ~ .)\n\n\n\n\n\n\n\nHorizontal split\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_grid(~ GENDER)\n\n\n\n\n\n\n\nVertical and Horizontal split\nThe code chunk below splits vertically by GENDER, and horizontally by RACE.\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_grid(GENDER ~ RACE)\n\n\n\n\n\n\n\n\nSplitting with facet_wrap\nInstead of faceting with variables in the horizontal or vertical direction, facet_wrap wraps the panels into a matrix.\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_wrap(~ CLASS)\n\n\n\n\n\n\nSpecifying number of columns or rows to wrap\nYou can also specify the number of columns or rows to wrap the facets, using ncol or nrow\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_wrap(~ CLASS, ncol = 2)\n\n\n\n\n\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_wrap(~ CLASS, nrow = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-5-statistics",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-5-statistics",
    "title": "Hands-on Exercise 1",
    "section": "Step 5: Statistics",
    "text": "Step 5: Statistics\nThere are two methods to work with statistics: using the stat_summary() method or the geom() method.\n\nThe stat_summary() method\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = GENDER, y = MATHS)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",\n               fun = \"mean\",\n               color = \"red\",\n               size = 4)\n\n\n\n\n\n\n\nThe geom() method\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = GENDER, y = MATHS)) +\n  geom_boxplot() +\n  geom_point(stat = \"summary\",\n             fun = \"mean\",\n             color = \"red\",\n             size = 4)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-6-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-6-coordinates",
    "title": "Hands-on Exercise 1",
    "section": "Step 6: Coordinates",
    "text": "Step 6: Coordinates\n\nFlipping the coordinates\nBy default, the bar chart of ggplot2 is in the vertical orientation, as seen earlier in “Step 3”.\nTo flip the coordinates (so that the bar chart is in a horizontal orientation), coord_flip is used.\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = RACE)) +   \n  geom_bar() +   \n  coord_flip()\n\n\n\n\n\n\n\nChanging the limits of the x and y axes\nThe following scatter plot shows the default limits of the x and y axes. However, as the range is not equal, it can be quite misleading.\n\n\nClick to show/hide the code\nggplot(data=exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nIn order to define the limits of the axes, coord_cartesian is used. The following code chunk fixes the range of limits of both axes to 0 - 100.\n\n\nClick to show/hide the code\nggplot(data=exam_data, aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5) +  \n  coord_cartesian(xlim=c(0,100), ylim=c(0,100))\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-7-theme",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#step-7-theme",
    "title": "Hands-on Exercise 1",
    "section": "Step 7: Theme",
    "text": "Step 7: Theme\nThemes allow us to change the appearance of the charts, and are not related to the data itself. Some of the elements that can be modified with themes include background color, font size, grid lines etc.\nSome of the built-in themes include: theme_gray() (default), theme_bw(), theme_classic(), theme_minimal.\nThe following code chunks are some examples of what the different built-in themes look like.\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = RACE)) +\n  geom_bar() +\n  theme_classic()\n\n\n\n\n\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = RACE)) +\n  geom_bar() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 2",
    "section": "",
    "text": "For this exercise, besides tidyverse, four R packages will be used, namely ggrepel, ggthemes, hrbrthemes and patchwork.\nThe code chunk below uses p_load() of the pacman package to check if all the packages are installed on the computer. If they are, they will then be loaded into the R environment.\n\n\nClick to show/hide the code\npacman::p_load(ggrepel, ggthemes, hrbrthemes, patchwork, tidyverse)\n\n\n\n\n\nTo import the data “Exam_data.csv” into the R environment, read_csv() of the readr package is used, as seen in the code chunk below.\n\n\nClick to show/hide the code\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#built-in-themes",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#built-in-themes",
    "title": "Hands-on Exercise 2",
    "section": "Built-in themes",
    "text": "Built-in themes\nThere are 8 built-in themes that comes with ggplot2, namely theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal() and theme_void().\nThe following code chunk is an example using theme_gray().\n\n\nClick to show/hide the code\nggplot(exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths Scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggthemes-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#ggthemes-package",
    "title": "Hands-on Exercise 2",
    "section": "ggthemes package",
    "text": "ggthemes package\nThe ggthemes package contains themes that replicate the look of plots by ‘The Wall Street Journal’, ‘The Economist’ etc.\nThe following code chunk demonstrates an example using The Economist theme.\n\n\nClick to show/hide the code\nggplot(exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n  theme_economist() +\n  ggtitle(\"Distribution of Maths Scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#hrbrthemes-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#hrbrthemes-package",
    "title": "Hands-on Exercise 2",
    "section": "hrbrthemes package",
    "text": "hrbrthemes package\nThe hrbrthemes package contains themes that are typography-centric.\n\n\nClick to show/hide the code\nggplot(exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n  theme_ipsum() +\n  ggtitle(\"Distribution of Maths Scores\")\n\n\n\n\n\nWe can also modify the appearance of the theme, as seen in the code chunk below.\n\n\nClick to show/hide the code\nggplot(exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n  theme_ipsum(axis_title_size = 18, base_size = 15, grid = \"Y\") +\n  ggtitle(\"Distribution of Maths Scores\")\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\naxis_title_size is used to change the font size of the axis title to 18.\nbase size is used to increase the size of the axis label to 15.\ngrid = \"Y\" will only display grid lines along the Y-axis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-separate-plots",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-separate-plots",
    "title": "Hands-on Exercise 2",
    "section": "Creating separate plots",
    "text": "Creating separate plots\nFirst, we will create the individual plots, assigning each plot to a variable name.\n\n\nClick to show/hide the code\np1 <- ggplot(exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of Maths Scores\")\np1\n\n\n\n\n\n\n\nClick to show/hide the code\np2 <- ggplot(exam_data, aes(x = ENGLISH)) +\n  geom_histogram(bins = 20, boundary = 100, color = \"grey25\", fill = \"grey90\") +\n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of English Scores\")\np2\n\n\n\n\n\n\n\nClick to show/hide the code\np3 <- ggplot(exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm, linewidth = 0.5) +\n  coord_cartesian(xlim = c(0,100), ylim = c(0,100)) +\n  ggtitle(\"English Scores vs Maths Scores for Primary 3\")\np3\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-multiple-plots-using-patchwork-1",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-multiple-plots-using-patchwork-1",
    "title": "Hands-on Exercise 2",
    "section": "Combining multiple plots using patchwork",
    "text": "Combining multiple plots using patchwork\n\nCombining two plots\n\nGeneral Syntax\n\n“+” sign: Combines two plots to form a two-column layout (i.e. side-by-side)\n“/” sign: Combines two plots to form a two-row layout (i.e. top and bottom)\n“()”: to create subplot groups\n\n\n\nClick to show/hide the code\np1 + p2\n\n\n\n\n\n\n\nClick to show/hide the code\np1 / p2\n\n\n\n\n\n\n\n\nCombining three plots\n\nAdditional syntax\nIn addition to the aforementioned operators, we can use “|” to place the plots beside each other. The following code chunk demonstrates the use of appropriate operators to combine three plots together.\n\n\nClick to show/hide the code\n(p1 / p2) | p3\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\nTagging subplots\npatchwork allows auto-tagging of subplots to enable easy identification of each subplot.\n\n\nClick to show/hide the code\n((p1 / p2) | p3) +\n  plot_annotation(tag_levels = \"a\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nCreating figures with inserts\nWe can also use inset_element() to insert plots into another plot.\n\n\nClick to show/hide the code\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3",
    "section": "",
    "text": "For this exercise, besides tidyverse, four R packages will be used, namely ggiraph, plotly, DT and patchwork.\n\nggiraph: for making ggplot2 graphics interactive.\nplotly: for plotting interactive statistical charts.\nDT: for creating data tables\n\nThe code chunk below uses p_load() of the pacman package to check if all the packages are installed on the computer. If they are, they will then be loaded into the R environment.\n\n\nClick to show/hide the code\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)\n\n\n\n\n\nTo import the data “Exam_data.csv” into the R environment, read_csv() of the readr package is used, as seen in the code chunk below.\n\n\nClick to show/hide the code\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3",
    "section": "Tooltip effect with tooltip aesthetic",
    "text": "Tooltip effect with tooltip aesthetic\nThe code chunk below is used to plot an interactive statistical graph using the tooltip feature of the ggiraph package.\n\n\nClick to show/hide the code\n# first plot the ggplot object using `geom_dotplot_interactive`\np <- ggplot(exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# use `girafe()` of ggiraph to generate an interactive svg object\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nHover over each data point to see the student’s ID\n\n\n\nDisplaying multiple information on tooltip\n\n\nClick to show/hide the code\n# customize the tooltip\nexam_data$tooltip <- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class = \", exam_data$CLASS))\n\n# plot the dotplot\np <- ggplot(exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# use `girafe()` of ggiraph to generate an interactive svg object\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nHover over each data point to see the student’s ID and class.\n\n\n\n\nCustomising tooltip style\nThe code chunk below uses opts_tooltip() to customise the tooltip\n\n\nClick to show/hide the code\n# use CSS to modify tooltip appearance\ntooltip_css <- \"background-color:white; #<<\nfont-style:bold; color:black;\" #<< \n\n# plot the dotplot\np <- ggplot(exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\n# use `opts_tooltip` to change tooltip appearance\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list( #<<\n    opts_tooltip( #<<\n      css = tooltip_css)) #<<\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nData points now have a white background and black font (black background and white font is the default).\n\n\n\n\nDisplaying statistics on tooltip\nThe code chunk below shows a more advanced way of customizing the tooltip.\n\n\nClick to show/hide the code\n# define a function to compute 90% coonfidence interval of the mean\ntooltip <- function(y, ymax, accuracy = 0.01) {\n  mean <- scales::number(y, accuracy = accuracy)\n  sem <- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point <- ggplot(exam_data, aes(x = RACE)) +\n  stat_summary(aes(y = MATHS, tooltip = after_stat(tooltip(y,ymax))),\n               fun.data = \"mean_se\",\n               geom = GeomInteractiveCol,\n               fill = \"lightblue\") +\n  stat_summary(aes(y = MATHS),\n               fun.data = mean_se,\n               geom = \"errorbar\", width = 0.2, linewidth = 0.2)\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8 * 0.618)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nHover over the bars to see the mean scores."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on Exercise 3",
    "section": "Hover effect with data_id aesthetic",
    "text": "Hover effect with data_id aesthetic\nAnother interactive feature of the ggiraph package is the data_id feature. The code chunk below shows an example of it.\n\n\nClick to show/hide the code\np <- ggplot(exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nHovering over a data point will highly all data points in the same class.\n\n\n\nModifying the hover effect\nThe code chunk below uses css codes to modify the highlighting effect.\n\n\nClick to show/hide the code\np <- ggplot(exam_data, aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL, breaks = NULL)\n      \ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6 * 0.618,\n  options = list(\n    opts_hover(css = 'fill: #202020;'),\n    opts_hover_inv(css = \"opacity: 0.2;\")\n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick-aesthetic",
    "title": "Hands-on Exercise 3",
    "section": "Click effect with onclick aesthetic",
    "text": "Click effect with onclick aesthetic\nThe onclick argument provides hotlink interactivity on the web.\n\n\nClick to show/hide the code\nexam_data$onclick <- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np <- ggplot(exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)         \n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nClicking on the plot will open up the MOE website."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on Exercise 3",
    "section": "Coordinated multiple views with ggiraph",
    "text": "Coordinated multiple views with ggiraph\nCoordinated multiple views can be created by combining interactive functions of ggiraph with the patchwork function. There are two steps involved:\n\nUse appropriate interactive functions of the ggiraph package to create the multiple views.\nUse the patchwork function of the patchwork package inside the girafe() function to create the interactive coordinated views.\n\n\n\nClick to show/hide the code\np1 <- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 <- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-using-plot_ly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-using-plot_ly",
    "title": "Hands-on Exercise 3",
    "section": "Creating an interactive scatter plot using plot_ly()",
    "text": "Creating an interactive scatter plot using plot_ly()\nThe code chunk below shows an example of creating a basic interactive scatter plot using plot_ly().\n\n\nClick to show/hide the code\nplot_ly(exam_data, \n        x = ~MATHS,\n        y = ~ENGLISH)\n\n\n\n\n\n\n\nWorking with visual variables in plot_ly()\nIn the code chunk below, the color argument is mapped to a qualitative visual variable (in this example, the visual variable is the RACE).\n\n\nClick to show/hide the code\nplot_ly(exam_data, \n        x = ~MATHS,\n        y = ~ENGLISH,\n        color = ~RACE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-using-ggplotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-using-ggplotly",
    "title": "Hands-on Exercise 3",
    "section": "Creating an interactive scatter plot using ggplotly()",
    "text": "Creating an interactive scatter plot using ggplotly()\nThe code chunk below shows an example of creating a basic interactive scatter plot using ggplotly().\n\n\nClick to show/hide the code\np <- ggplot(exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that only an additional line ggplotly() is included."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-mulitple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-mulitple-views-with-plotly",
    "title": "Hands-on Exercise 3",
    "section": "Coordinated mulitple views with plotly",
    "text": "Coordinated mulitple views with plotly\nThere are three steps involved in the creation of coordinated multiple views with plotly:\n\nhighlight_key of the plotly package is used as shared data.\nUse ggplot2 functions to create 2 scatter plots.\nsubplot() function of the plotly package is used to place the plots side-by-side.\n\n\n\nClick to show/hide the code\nd <- highlight_key(exam_data)\np1 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 <- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-data-table-using-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-data-table-using-dt-package",
    "title": "Hands-on Exercise 3",
    "section": "Creating an interactive data table using DT package",
    "text": "Creating an interactive data table using DT package\nThe code chunk below is an example of creating of data tables.\n\n\nClick to show/hide the code\nDT::datatable(exam_data, class = \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-using-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-using-crosstalk-method",
    "title": "Hands-on Exercise 3",
    "section": "Linked brushing using crosstalk method",
    "text": "Linked brushing using crosstalk method\n\n\nClick to show/hide the code\nd <- highlight_key(exam_data) \np <- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg <- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nSelecting one or multiple rows from the data table will highlight the selection on the scatter plot"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html",
    "title": "In-class Exercise 1",
    "section": "",
    "text": "The code chunk below uses p_load() of the pacman package to check if the tidyverse packages are installed on the computer. If they are, they will then be loaded into the R environment.\n\n\nClick to show/hide the code\npacman::p_load(tidyverse)\n\n\n\n\n\nTo import the data “Exam_data.csv” into the R environment, read_csv() of the readr package is used, as seen in the code chunk below.\n\n\nClick to show/hide the code\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design",
    "title": "In-class Exercise 1",
    "section": "The original design",
    "text": "The original design\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\n\nCriticisms:\n1. y-axis label is not clear\n2. For effective comparison, the bars should be sorted according to their respective frequencies\n3. For static charts, frequency values should be included for additional information"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design",
    "title": "In-class Exercise 1",
    "section": "Modifying the design",
    "text": "Modifying the design\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = reorder(RACE, RACE, function(x)-length(x)))) +\n  geom_bar() +\n  geom_text(stat = \"count\", \n      aes(label = paste0(after_stat(count), \", \", \n      round(after_stat(count)/sum(after_stat(count))*100, 1), \"%\")),\n      vjust=-1) +\n  xlab(\"Race\") +\n  ylab(\"No. of pupils\") +\n  ylim(0,220) +\n  theme(axis.title.y=element_text(angle = 0))\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\ngeom_text() is used to add the labels above the chart.\n\npaste0(after_stat(count)) - to add the total count.\nround(after_stat(count)/sum(after_stat(count))*100, 1), \"%\") - to add the percentage.\nafter_stat(count) is the newer version of ..count.., which has been deprecated in the later version of ggplot2.\n\nxlab and ylab are used to add the axes labels.\n\naxis.title.y is used to modify the y-axis’s label\nelement_text() is used to modify the looks of the texts. In this case, it is used to rotate the y-axis label to 0 degrees (i.e. horizontal orientation)."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-1",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-1",
    "title": "In-class Exercise 1",
    "section": "The original design",
    "text": "The original design\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design-1",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design-1",
    "title": "In-class Exercise 1",
    "section": "Modifying the design",
    "text": "Modifying the design\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS)) +\n  geom_histogram(bins = 20, color = \"black\", fill = \"lightblue\") +\n  geom_vline(aes(xintercept = mean(MATHS, na.rm = T)), color = \"red\", linetype = \"dashed\", linewidth = 1) +\n  geom_vline(aes(xintercept = median(MATHS, na.rm = T)), color = \"grey30\", linetype = \"dashed\", linewidth = 1)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\ngeom_vline() creates a vertical line, which will intercept the x-axis."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-2",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-2",
    "title": "In-class Exercise 1",
    "section": "The original design",
    "text": "The original design\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = ENGLISH)) +\n  geom_histogram() +\n  facet_wrap (~ GENDER)\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design-2",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design-2",
    "title": "In-class Exercise 1",
    "section": "Modifying the design",
    "text": "Modifying the design\n\n\nClick to show/hide the code\ndata_bg <- exam_data[,-3]\n\nggplot(data = exam_data, aes(x = ENGLISH, fill = GENDER)) +\n  geom_histogram(data = data_bg, fill = \"grey\", alpha = 0.5) +\n  geom_histogram(color = \"black\") +\n  facet_wrap (~ GENDER) +\n  theme_bw()\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe chart is created by combining two histograms.\nThe histogram in the background shows the total with the transparency adjusted to 50% using alpha, while the histogram in the foreground is split by GENDER using facet_wrap()."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-3",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#the-original-design-3",
    "title": "In-class Exercise 1",
    "section": "The original design",
    "text": "The original design\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design-3",
    "href": "In-class_Ex/In-class_Ex01/In-class_Ex01.html#modifying-the-design-3",
    "title": "In-class Exercise 1",
    "section": "Modifying the design",
    "text": "Modifying the design\n\n\nClick to show/hide the code\nggplot(data = exam_data, aes(x = MATHS, y = ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim = c(0,100), ylim = c(0,100)) +\n  geom_vline(xintercept = 50, color = \"grey60\", linetype = \"dashed\", linewidth = 1) +\n  geom_hline(yintercept = 50, color = \"grey60\", linetype = \"dashed\", linewidth = 1)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\ngeom_vline() is used to create a vertical line as mentioned previously.\nTo create a horizontal line, geom_hline() and yintercept is used instead.\ncoord_cartesian() allows us to modify the limits of the x and y axes, in this case, to range from 0 - 100."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "LY’s Visual Analytics Adventure 💯",
    "section": "",
    "text": "Hello there! Welcome to my exciting voyage into the captivating realm that is ISSS608 Visual Analytics and Applications! This website serves as a compass for navigating through the coursework that I have prepared for this course.\nJoin me as we journey into the depths of data visualization, delving into its intricate details and unearthing priceless nuggets of insights and revelations."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "The objective of this exercise is to reveal the demographic and financial characteristics of the city of Engagement, using appropriate static and interactive statistical graphics methods.\nThis exercise requires a user-friendly and interactive solution that helps city managers and planners to explore the complex data in an engaging way and reveal hidden patterns."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#installing-and-loading-of-r-packages",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#installing-and-loading-of-r-packages",
    "title": "Take-home Exercise 1",
    "section": "3.1 Installing and loading of R packages",
    "text": "3.1 Installing and loading of R packages\nIn this exercise, the following R packages will be used:\n\ntidyverse: for data cleaning and manipulation.\nggiraph: for making ggplot2 graphics interactive.\nplotly: for plotting interactive statistical charts.\npatchwork:\nknitr: for generating a simple table using the kable() function\n\nThe code chunk below uses p_load() of the pacman package to check if all the packages are installed. If they are, they will then be loaded into the R environment.\n\n\nClick to show/hide the code\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse, skimr, knitr, ggstatsplot, ggridges)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-the-data-sets",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#importing-the-data-sets",
    "title": "Take-home Exercise 1",
    "section": "3.2 Importing the data sets",
    "text": "3.2 Importing the data sets\nTo import the data “Participants.csv” and “FinancialJournal.csv” into the R environment, read_csv() of the readr package is used, as seen in the code chunks below.\n\n\nClick to show/hide the code\nparticipants <- read_csv(\"data/Participants.csv\")\n\n\n\n\nClick to show/hide the code\nfin_journal <- read_csv(\"data/FinancialJournal.csv\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-wrangling",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-wrangling",
    "title": "Take-home Exercise 1",
    "section": "3.3 Data wrangling",
    "text": "3.3 Data wrangling\n\n3.3.1 Reformatting of variables\nWe will examine both data sets using the glimpse() function of the dplyr package. Firstly, the participants data set is examined.\n\n\nClick to show/hide the code\nglimpse(participants)\n\n\nRows: 1,011\nColumns: 7\n$ participantId  <dbl> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n$ householdSize  <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n$ haveKids       <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, T…\n$ age            <dbl> 36, 25, 35, 21, 43, 32, 26, 27, 20, 35, 48, 27, 34, 18,…\n$ educationLevel <chr> \"HighSchoolOrCollege\", \"HighSchoolOrCollege\", \"HighScho…\n$ interestGroup  <chr> \"H\", \"B\", \"A\", \"I\", \"H\", \"D\", \"I\", \"A\", \"G\", \"D\", \"D\", …\n$ joviality      <dbl> 0.001626703, 0.328086500, 0.393469590, 0.138063446, 0.8…\n\n\nIssues:\n\nThe variables participantID, householdSize and age are currently formatted as <dbl>. These variables will have to be converted into <int> format.\nLikewise, the variable educationLevel will need to be converted from <chr> to <fct> format. The educationLevel will then be sorted from the lowest level (Low) to the highest level (Graduate).\n\nThe aforementioned variables are reformatted into the correct type, as seen in the code chunk below.\n\n\nClick to show/hide the code\nparticipants <- participants %>%\n  \n  # convert 'participantId', 'householdSize' and 'age' into <int> \n  mutate_at(vars('participantId', 'householdSize', 'age'), as.integer) %>%\n  \n  # convert 'educationLevel' to <fct>\n  mutate_at(vars('educationLevel'), as.factor) %>% \n  \n  # sort 'educationLevel' in order\n  mutate(educationLevel = factor(educationLevel, levels = c(\"Low\", \"HighSchoolOrCollege\", \"Bachelors\", \"Graduate\"))) \n\nglimpse(participants)\n\n\nRows: 1,011\nColumns: 7\n$ participantId  <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n$ householdSize  <int> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3…\n$ haveKids       <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, T…\n$ age            <int> 36, 25, 35, 21, 43, 32, 26, 27, 20, 35, 48, 27, 34, 18,…\n$ educationLevel <fct> HighSchoolOrCollege, HighSchoolOrCollege, HighSchoolOrC…\n$ interestGroup  <chr> \"H\", \"B\", \"A\", \"I\", \"H\", \"D\", \"I\", \"A\", \"G\", \"D\", \"D\", …\n$ joviality      <dbl> 0.001626703, 0.328086500, 0.393469590, 0.138063446, 0.8…\n\n\nNext, we will examine the fin_journal data set.\n\n\nClick to show/hide the code\nglimpse(fin_journal)\n\n\nRows: 1,513,636\nColumns: 4\n$ participantId <dbl> 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6,…\n$ timestamp     <dttm> 2022-03-01, 2022-03-01, 2022-03-01, 2022-03-01, 2022-03…\n$ category      <chr> \"Wage\", \"Shelter\", \"Education\", \"Wage\", \"Shelter\", \"Educ…\n$ amount        <dbl> 2472.50756, -554.98862, -38.00538, 2046.56221, -554.9886…\n\n\nIssues:\n\nThe timestamp variable is in “YYYY-MM-DD HH:MM:SS” format. A new variable yearmon in “YYYY-MM” format will be created to facilitate in data analysis later on.\nThe variable participantID will need to be reformatted from <dbl> to <int>.\n\nThe aforementioned issues are addressed in the code chunk below.\n\n\nClick to show/hide the code\nfin_journal <- fin_journal %>%\n  \n  # convert 'participantId' to <int>\n  mutate_at(vars('participantId'), as.integer) %>%\n  \n  # create a new 'yearmon' column\n  mutate(yearmon = format(as.Date(timestamp), '%Y-%m'))\n\nglimpse(fin_journal)\n\n\nRows: 1,513,636\nColumns: 5\n$ participantId <int> 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6,…\n$ timestamp     <dttm> 2022-03-01, 2022-03-01, 2022-03-01, 2022-03-01, 2022-03…\n$ category      <chr> \"Wage\", \"Shelter\", \"Education\", \"Wage\", \"Shelter\", \"Educ…\n$ amount        <dbl> 2472.50756, -554.98862, -38.00538, 2046.56221, -554.9886…\n$ yearmon       <chr> \"2022-03\", \"2022-03\", \"2022-03\", \"2022-03\", \"2022-03\", \"…\n\n\n\n\n3.3.2 Checking for missing values\nis.na() function is used to check for any missing values in both data sets. As seen from the results below, there are no missing values present.\n\n\nClick to show/hide the code\nsapply(participants, function(x) sum(is.na(x)))\n\n\n participantId  householdSize       haveKids            age educationLevel \n             0              0              0              0              0 \n interestGroup      joviality \n             0              0 \n\n\n\n\nClick to show/hide the code\nsapply(fin_journal, function(x) sum(is.na(x)))\n\n\nparticipantId     timestamp      category        amount       yearmon \n            0             0             0             0             0 \n\n\n\n\n3.3.3 Checking and removing of duplicate rows\nWe can use the unique() function to retain rows that are distinct (i.e remove all duplicate rows).\nAs seen in the table below, there are now 1,512,523 rows in the data set fin_journal, meaning 1,113 duplicate rows were removed from the data set.\n\n\nClick to show/hide the code\nfin_journal <- unique(fin_journal)\nfin_journal\n\n\n# A tibble: 1,512,523 × 5\n   participantId timestamp           category  amount yearmon\n           <int> <dttm>              <chr>      <dbl> <chr>  \n 1             0 2022-03-01 00:00:00 Wage      2473.  2022-03\n 2             0 2022-03-01 00:00:00 Shelter   -555.  2022-03\n 3             0 2022-03-01 00:00:00 Education  -38.0 2022-03\n 4             1 2022-03-01 00:00:00 Wage      2047.  2022-03\n 5             1 2022-03-01 00:00:00 Shelter   -555.  2022-03\n 6             1 2022-03-01 00:00:00 Education  -38.0 2022-03\n 7             2 2022-03-01 00:00:00 Wage      2437.  2022-03\n 8             2 2022-03-01 00:00:00 Shelter   -557.  2022-03\n 9             2 2022-03-01 00:00:00 Education  -12.8 2022-03\n10             3 2022-03-01 00:00:00 Wage      2367.  2022-03\n# ℹ 1,512,513 more rows\n\n\nThe same check is done on participants, and as seen from the table below, there are no duplicate rows to be removed.\n\n\nClick to show/hide the code\nunique(participants)\n\n\n# A tibble: 1,011 × 7\n   participantId householdSize haveKids   age educationLevel      interestGroup\n           <int>         <int> <lgl>    <int> <fct>               <chr>        \n 1             0             3 TRUE        36 HighSchoolOrCollege H            \n 2             1             3 TRUE        25 HighSchoolOrCollege B            \n 3             2             3 TRUE        35 HighSchoolOrCollege A            \n 4             3             3 TRUE        21 HighSchoolOrCollege I            \n 5             4             3 TRUE        43 Bachelors           H            \n 6             5             3 TRUE        32 HighSchoolOrCollege D            \n 7             6             3 TRUE        26 HighSchoolOrCollege I            \n 8             7             3 TRUE        27 Bachelors           A            \n 9             8             3 TRUE        20 Bachelors           G            \n10             9             3 TRUE        35 Bachelors           D            \n# ℹ 1,001 more rows\n# ℹ 1 more variable: joviality <dbl>\n\n\n\n\n3.3.4 Converting and rounding amount values\nTo facilitate data visualization, all values will be transformed into their absolute values and rounded to two decimal places, keeping in line with the format for currency.\n\n\nClick to show/hide the code\n# convert all values *amount* to absolute values\nfin_journal$amount <- abs(fin_journal$amount)\n\n# round all values to 2 decimal places\nfin_journal$amount <- round(fin_journal$amount, digits = 2)\n\n\n\n\n3.3.5 Summation of category amounts\nSince there are several transactions of the same category for each participant within a given month, we will employ the group_by() and summarise() functions to combine all transactions of the same category by adding them up.\n\n\nClick to show/hide the code\nfin_journal <- fin_journal %>%\n  group_by(participantId, yearmon, category) %>% \n  summarise(amount = sum(amount))\n\n\n\n\n3.3.6 Pivoting category column in fin_journal\nThe pivot_wider() function is used to generate separate columns for each transaction category.\nIn addition, any missing ‘NaN’ values are substituted with 0 to indicate that the participant had no transactions of that specific category in that particular month and year.\n\n\nClick to show/hide the code\nfin_journal <- fin_journal %>%\n  \n  # pivoting the category column\n  pivot_wider(names_from = category,\n              values_from = amount) %>%\n  \n  # fill missing values with 0\n  mutate_all(~replace(., is.na(.), 0))\n\n\n\n\n3.3.7 Creating new variables total_expenses, total_earnings and total_savings\n\n\nClick to show/hide the code\nfin_journal <- fin_journal %>%\n  \n  # create new column for total expenses\n  mutate(total_expenses = sum(Education, Food, Recreation, Shelter)) %>%\n  \n  # create new column for total earnings\n  mutate(total_earnings = sum(Wage, RentAdjustment)) %>%  \n\n  # create new column for total earnings\n  mutate(total_savings = (total_earnings - total_expenses))\n\n\n\n\n3.3.8 Displaying of final cleaned data sets\nUsing the kable() function of the knitr package, the final cleaned data sets are displayed as follows:\n\n\nClick to show/hide the code\nkable(head(participants), align = \"c\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nparticipantId\nhouseholdSize\nhaveKids\nage\neducationLevel\ninterestGroup\njoviality\n\n\n\n\n0\n3\nTRUE\n36\nHighSchoolOrCollege\nH\n0.0016267\n\n\n1\n3\nTRUE\n25\nHighSchoolOrCollege\nB\n0.3280865\n\n\n2\n3\nTRUE\n35\nHighSchoolOrCollege\nA\n0.3934696\n\n\n3\n3\nTRUE\n21\nHighSchoolOrCollege\nI\n0.1380634\n\n\n4\n3\nTRUE\n43\nBachelors\nH\n0.8573967\n\n\n5\n3\nTRUE\n32\nHighSchoolOrCollege\nD\n0.7729578\n\n\n\n\n\n\n\nClick to show/hide the code\nkable(head(fin_journal), align = \"c\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nparticipantId\nyearmon\nEducation\nFood\nRecreation\nShelter\nWage\nRentAdjustment\ntotal_expenses\ntotal_earnings\ntotal_savings\n\n\n\n\n0\n2022-03\n38.01\n268.26\n348.68\n554.99\n11931.95\n0\n1209.94\n11931.95\n10722.01\n\n\n0\n2022-04\n38.01\n265.79\n219.42\n554.99\n8636.88\n0\n1078.21\n8636.88\n7558.67\n\n\n0\n2022-05\n38.01\n264.54\n382.99\n554.99\n9048.16\n0\n1240.53\n9048.16\n7807.63\n\n\n0\n2022-06\n38.01\n256.90\n465.67\n554.99\n9048.16\n0\n1315.57\n9048.16\n7732.59\n\n\n0\n2022-07\n38.01\n270.13\n1069.48\n554.99\n8636.88\n0\n1932.61\n8636.88\n6704.27\n\n\n0\n2022-08\n38.01\n261.76\n314.13\n554.99\n9459.44\n0\n1168.89\n9459.44\n8290.55"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#installing-and-loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#installing-and-loading-r-packages",
    "title": "Hands-on Exercise 3",
    "section": "Installing and loading R packages",
    "text": "Installing and loading R packages\nFor this exercise, besides tidyverse, four R packages will be used, namely ggiraph, plotly, DT and patchwork.\n\nggiraph: for making ggplot2 graphics interactive.\nplotly: for plotting interactive statistical charts.\nDT: for creating data tables.\n\nThe code chunk below uses p_load() of the pacman package to check if all the packages are installed on the computer. If they are, they will then be loaded into the R environment.\n\n\nClick to show/hide the code\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data",
    "title": "Hands-on Exercise 3",
    "section": "Importing the data",
    "text": "Importing the data\nTo import the data “Exam_data.csv” into the R environment, read_csv() of the readr package is used, as seen in the code chunk below.\n\n\nClick to show/hide the code\nexam_data <- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#installing-and-loading-r-packages-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#installing-and-loading-r-packages-1",
    "title": "Hands-on Exercise 3",
    "section": "Installing and loading R packages",
    "text": "Installing and loading R packages\nFor this exercise, in addition to plotly and tidyverse, the following packages are used:\n\nreadxl: for importing excel worksheets.\ngifski: for creating animated GIFs.\ngapminder: for this exercise, the purpose is to use the country_colors scheme.\ngganimate: for creating animated statistical graphs.\n\n\n\nClick to show/hide the code\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\npackage 'gifski' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\limli\\AppData\\Local\\Temp\\RtmpeIyexj\\downloaded_packages\npackage 'gapminder' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\limli\\AppData\\Local\\Temp\\RtmpeIyexj\\downloaded_packages\npackage 'gganimate' successfully unpacked and MD5 sums checked\n\nThe downloaded binary packages are in\n    C:\\Users\\limli\\AppData\\Local\\Temp\\RtmpeIyexj\\downloaded_packages"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data-1",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#importing-the-data-1",
    "title": "Hands-on Exercise 3",
    "section": "Importing the data",
    "text": "Importing the data\n\n\nClick to show/hide the code\ncol <- c(\"Country\", \"Continent\")\nglobalPop <- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %>%\n  mutate_each_(funs(factor(.)), col) %>%\n  mutate(Year = as.integer(Year))\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate() is used to convert Year into integer."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-a-static-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-a-static-bubble-plot",
    "title": "Hands-on Exercise 3",
    "section": "Building a static bubble plot",
    "text": "Building a static bubble plot\nThe code chunk below uses basic ggplot functions to build a static bubble plot.\n\n\nClick to show/hide the code\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-an-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-an-animated-bubble-plot",
    "title": "Hands-on Exercise 3",
    "section": "Building an animated bubble plot",
    "text": "Building an animated bubble plot\nThe code chunk below uses transition_time() of gganimate to create transition through distinct states in time (i.e. Years), and ease_aes() to control easing of aesthetics, with the default being linear.\n\n\nClick to show/hide the code\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-an-animated-bubble-plot-using-ggplotly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-an-animated-bubble-plot-using-ggplotly",
    "title": "Hands-on Exercise 3",
    "section": "Building an animated bubble plot using ggplotly()",
    "text": "Building an animated bubble plot using ggplotly()\nThe code chunk below demonstrated how to build an animate bubble plot using ggplotly() instead.\n\n\nClick to show/hide the code\ngg <- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') \nggplotly(gg)\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nA static bubble plot is first created using the appropriate ggplot2 functions and then saved as an R object called gg.\nggplotly() is then used to convert the R object into an animated svg object."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-an-animated-bubble-plot-using-plot_ly",
    "href": "Hands-on_Ex/Hands-on_Ex03/Hands-on_Ex03.html#building-an-animated-bubble-plot-using-plot_ly",
    "title": "Hands-on Exercise 3",
    "section": "Building an animated bubble plot using plot_ly()",
    "text": "Building an animated bubble plot using plot_ly()\n\n\nClick to show/hide the code\nbp <- globalPop %>%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent, \n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-r-packages",
    "title": "Hands-on Exercise 4",
    "section": "Installing and loading R packages",
    "text": "Installing and loading R packages\nIn this exercise, other than tidyverse, ggstatsplot will also be used. ggstatsplot is an extension of the ggplot2 package and allows details from statistical tests to be added to the information-rich plots.\n\n\nClick to show/hide the code\npacman::p_load(tidyverse, ggstatsplot)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#loading-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#loading-the-data",
    "title": "Hands-on Exercise 4",
    "section": "Loading the data",
    "text": "Loading the data\n\n\nClick to show/hide the code\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nClick to show/hide the code\nexam_data\n\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-r-packages-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#installing-and-loading-r-packages-1",
    "title": "Hands-on Exercise 4",
    "section": "Installing and loading R packages",
    "text": "Installing and loading R packages\nThe code chunk below shows the R packages to be installed and loaded into the R environment for this exercise.\n\n\nClick to show/hide the code\npacman::p_load(readxl, performance, parameters, see)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#loading-the-data-1",
    "href": "Hands-on_Ex/Hands-on_Ex04/Hands-on_Ex04.html#loading-the-data-1",
    "title": "Hands-on Exercise 4",
    "section": "Loading the data",
    "text": "Loading the data\nTo import the excel worksheet ToyotaCorolla.xls, read_xls() of the readxl package is used, as seen in the code chunk below.\n\n\nClick to show/hide the code\ncar_resale <- read_xls(\"data/ToyotaCorolla.xls\")\ncar_resale\n\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   <dbl> <chr>    <dbl>     <dbl>     <dbl>    <dbl>  <dbl>         <dbl>  <dbl>\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period <dbl>, HP_Bin <chr>, CC_bin <chr>,\n#   Doors <dbl>, Gears <dbl>, Cylinders <dbl>, Fuel_Type <chr>, Color <chr>,\n#   Met_Color <dbl>, Automatic <dbl>, Mfr_Guarantee <dbl>,\n#   BOVAG_Guarantee <dbl>, ABS <dbl>, Airbag_1 <dbl>, Airbag_2 <dbl>,\n#   Airco <dbl>, Automatic_airco <dbl>, Boardcomputer <dbl>, CD_Player <dbl>,\n#   Central_Lock <dbl>, Powered_Windows <dbl>, Power_Steering <dbl>, …"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Exercise 4",
    "section": "",
    "text": "Click to show/hide the code\npacman::p_load(rstatix, gt, patchwork, tidyverse)\n\n\n\n\n\n\n\nClick to show/hide the code\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nClick to show/hide the code\nexam_data\n\n\n# A tibble: 322 × 7\n   ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n   <chr>      <chr> <chr>  <chr>     <dbl> <dbl>   <dbl>\n 1 Student321 3I    Male   Malay        21     9      15\n 2 Student305 3I    Female Malay        24    22      16\n 3 Student289 3H    Male   Chinese      26    16      16\n 4 Student227 3F    Male   Chinese      27    77      31\n 5 Student318 3I    Male   Malay        27    11      25\n 6 Student306 3I    Female Malay        31    16      16\n 7 Student313 3I    Male   Chinese      31    21      25\n 8 Student316 3I    Male   Malay        31    18      27\n 9 Student312 3I    Male   Malay        33    19      15\n10 Student297 3H    Male   Indian       34    49      37\n# ℹ 312 more rows"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#the-plot",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#the-plot",
    "title": "In-class Exercise 4",
    "section": "The plot",
    "text": "The plot\n\nThe PlotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\nClick to show/hide the code\n## eval: false will show the code chunk without running the code.\n\nggplot(exam_data, aes(sample = ENGLISH)) +\n  stat_qq() +\n  stat_qq_line(color = \"red\", linewidth = 1)\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAs the points deviate slightly from the diagonal line, it is indicative that the data set DOES NOT conform with normal distribution."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#the-plot-1",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#the-plot-1",
    "title": "In-class Exercise 4",
    "section": "The Plot",
    "text": "The Plot"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#the-code-chunk",
    "href": "In-class_Ex/In-class_Ex04/In-class_Ex04.html#the-code-chunk",
    "title": "In-class Exercise 4",
    "section": "The code chunk",
    "text": "The code chunk\n\n\nCode\n## eval: false will show the code chunk without running the code.\n\nggplot(exam_data, aes(sample = ENGLISH)) +\n  stat_qq() +\n  stat_qq_line(color = \"red\", linewidth = 1)\n\n\n\n\n\n\n\n\nNote\n\n\n\nAs the points deviate slightly from the diagonal line, it is indicative that the data set DOES NOT conform with normal distribution."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation-1",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#data-preparation-1",
    "title": "Take-home Exercise 1",
    "section": "3.3 Data Preparation",
    "text": "3.3 Data Preparation\n\n3.3.1 Reformatting of variables\nFirstly, we will examine the participants data set.\n\n\nClick to show/hide the code\nstr(participants)\n\n\nspc_tbl_ [1,011 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ participantId : num [1:1011] 0 1 2 3 4 5 6 7 8 9 ...\n $ householdSize : num [1:1011] 3 3 3 3 3 3 3 3 3 3 ...\n $ haveKids      : logi [1:1011] TRUE TRUE TRUE TRUE TRUE TRUE ...\n $ age           : num [1:1011] 36 25 35 21 43 32 26 27 20 35 ...\n $ educationLevel: chr [1:1011] \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" \"HighSchoolOrCollege\" ...\n $ interestGroup : chr [1:1011] \"H\" \"B\" \"A\" \"I\" ...\n $ joviality     : num [1:1011] 0.00163 0.32809 0.39347 0.13806 0.8574 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   participantId = col_double(),\n  ..   householdSize = col_double(),\n  ..   haveKids = col_logical(),\n  ..   age = col_double(),\n  ..   educationLevel = col_character(),\n  ..   interestGroup = col_character(),\n  ..   joviality = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n\n\nIssues:\n\nThe variables participantID, householdSize and age are currently formatted as <dbl>. These variables will have to be converted into <int> format.\nLikewise, the variable educationLevel will need to be converted from <chr> to <fct> format.\n\nThe aforementioned variables are reformatted into the correct type, as seen in the code chunk below.\n\n\nClick to show/hide the code\nparticipants <- participants %>%\n  \n  # convert 'participantId', 'householdSize' and 'age' into <int> \n  mutate_at(vars('participantId', 'householdSize', 'age'), as.integer) %>%\n  \n  # convert 'educationLevel' to <fct>\n  mutate_at(vars('educationLevel'), as.factor)\n\nparticipants\n\n\n# A tibble: 1,011 × 7\n   participantId householdSize haveKids   age educationLevel      interestGroup\n           <int>         <int> <lgl>    <int> <fct>               <chr>        \n 1             0             3 TRUE        36 HighSchoolOrCollege H            \n 2             1             3 TRUE        25 HighSchoolOrCollege B            \n 3             2             3 TRUE        35 HighSchoolOrCollege A            \n 4             3             3 TRUE        21 HighSchoolOrCollege I            \n 5             4             3 TRUE        43 Bachelors           H            \n 6             5             3 TRUE        32 HighSchoolOrCollege D            \n 7             6             3 TRUE        26 HighSchoolOrCollege I            \n 8             7             3 TRUE        27 Bachelors           A            \n 9             8             3 TRUE        20 Bachelors           G            \n10             9             3 TRUE        35 Bachelors           D            \n# ℹ 1,001 more rows\n# ℹ 1 more variable: joviality <dbl>\n\n\nNext, we will examine the fin_journal data set.\n\n\nClick to show/hide the code\nfin_journal\n\n\n# A tibble: 1,513,636 × 4\n   participantId timestamp           category  amount\n           <dbl> <dttm>              <chr>      <dbl>\n 1             0 2022-03-01 00:00:00 Wage      2473. \n 2             0 2022-03-01 00:00:00 Shelter   -555. \n 3             0 2022-03-01 00:00:00 Education  -38.0\n 4             1 2022-03-01 00:00:00 Wage      2047. \n 5             1 2022-03-01 00:00:00 Shelter   -555. \n 6             1 2022-03-01 00:00:00 Education  -38.0\n 7             2 2022-03-01 00:00:00 Wage      2437. \n 8             2 2022-03-01 00:00:00 Shelter   -557. \n 9             2 2022-03-01 00:00:00 Education  -12.8\n10             3 2022-03-01 00:00:00 Wage      2367. \n# ℹ 1,513,626 more rows\n\n\nIssues:\n\nThe timestamp variable is in “YYYY-MM-DD HH:MM:SS” format. A new variable yearmon will be created to facilitate in data analysis later on.\nThe variable participantID will need to be reformatted from <dbl> to <int>.\n\nThe aforementioned variables are reformatted into the correct type, as seen in the code chunk below.\n\n\nClick to show/hide the code\nfin_journal <- fin_journal %>%\n  \n  # convert 'participantId' to <int>\n  mutate_at(vars('participantId'), as.integer) %>%\n  \n  # convert 'timestamp' into 'yearmon' column\n  mutate(yearmon = format(as.Date(timestamp), '%Y-%m'))\n         #, day = day(timestamp)) %>%\n\n  # remove 'timestamp' column\n  # select(-timestamp)\n\nfin_journal\n\n\n# A tibble: 1,513,636 × 5\n   participantId timestamp           category  amount yearmon\n           <int> <dttm>              <chr>      <dbl> <chr>  \n 1             0 2022-03-01 00:00:00 Wage      2473.  2022-03\n 2             0 2022-03-01 00:00:00 Shelter   -555.  2022-03\n 3             0 2022-03-01 00:00:00 Education  -38.0 2022-03\n 4             1 2022-03-01 00:00:00 Wage      2047.  2022-03\n 5             1 2022-03-01 00:00:00 Shelter   -555.  2022-03\n 6             1 2022-03-01 00:00:00 Education  -38.0 2022-03\n 7             2 2022-03-01 00:00:00 Wage      2437.  2022-03\n 8             2 2022-03-01 00:00:00 Shelter   -557.  2022-03\n 9             2 2022-03-01 00:00:00 Education  -12.8 2022-03\n10             3 2022-03-01 00:00:00 Wage      2367.  2022-03\n# ℹ 1,513,626 more rows\n\n\n\n\n3.3.2 Checking for missing values\nis.na() function is used to check for any missing values in both data sets. As seen from the results below, there are no missing values present.\n\n\nClick to show/hide the code\nsapply(participants, function(x) sum(is.na(x)))\n\n\n participantId  householdSize       haveKids            age educationLevel \n             0              0              0              0              0 \n interestGroup      joviality \n             0              0 \n\n\n\n\nClick to show/hide the code\nsapply(fin_journal, function(x) sum(is.na(x)))\n\n\nparticipantId     timestamp      category        amount       yearmon \n            0             0             0             0             0 \n\n\n\n\n3.3.3 Checking and removing of duplicate rows\nWe can use the unique() function to retain rows that are distinct (i.e remove all duplicate rows).\nAs seen in the table below, there are now 1,512,523 rows in the data set fin_journal, meaning 1,113 duplicate rows were removed from the data set.\n\n\nClick to show/hide the code\nfin_journal <- unique(fin_journal)\nfin_journal\n\n\n# A tibble: 1,512,523 × 5\n   participantId timestamp           category  amount yearmon\n           <int> <dttm>              <chr>      <dbl> <chr>  \n 1             0 2022-03-01 00:00:00 Wage      2473.  2022-03\n 2             0 2022-03-01 00:00:00 Shelter   -555.  2022-03\n 3             0 2022-03-01 00:00:00 Education  -38.0 2022-03\n 4             1 2022-03-01 00:00:00 Wage      2047.  2022-03\n 5             1 2022-03-01 00:00:00 Shelter   -555.  2022-03\n 6             1 2022-03-01 00:00:00 Education  -38.0 2022-03\n 7             2 2022-03-01 00:00:00 Wage      2437.  2022-03\n 8             2 2022-03-01 00:00:00 Shelter   -557.  2022-03\n 9             2 2022-03-01 00:00:00 Education  -12.8 2022-03\n10             3 2022-03-01 00:00:00 Wage      2367.  2022-03\n# ℹ 1,512,513 more rows\n\n\nThe same check is done on participants, and as seen from the table below, there are no duplicate rows to be removed.\n\n\nClick to show/hide the code\nunique(participants)\n\n\n# A tibble: 1,011 × 7\n   participantId householdSize haveKids   age educationLevel      interestGroup\n           <int>         <int> <lgl>    <int> <fct>               <chr>        \n 1             0             3 TRUE        36 HighSchoolOrCollege H            \n 2             1             3 TRUE        25 HighSchoolOrCollege B            \n 3             2             3 TRUE        35 HighSchoolOrCollege A            \n 4             3             3 TRUE        21 HighSchoolOrCollege I            \n 5             4             3 TRUE        43 Bachelors           H            \n 6             5             3 TRUE        32 HighSchoolOrCollege D            \n 7             6             3 TRUE        26 HighSchoolOrCollege I            \n 8             7             3 TRUE        27 Bachelors           A            \n 9             8             3 TRUE        20 Bachelors           G            \n10             9             3 TRUE        35 Bachelors           D            \n# ℹ 1,001 more rows\n# ℹ 1 more variable: joviality <dbl>\n\n\n\n\n3.3.4 Summation of category amounts\n\n\nClick to show/hide the code\nfin_journal <- fin_journal %>%\n  group_by(participantId, yearmon, category) %>% \n  summarise(amount = sum(amount))\n\n\n\n\n3.3.5 Pivoting category column in fin_journal\n\n\nClick to show/hide the code\nfin_journal <- fin_journal %>%\n  \n  # pivoting the category column\n  pivot_wider(names_from = category,\n              values_from = amount) %>%\n  \n  # fill missing values with 0\n  mutate_all(~replace(., is.na(.), 0))\n\n\n\n\n3.3.6 Creating a new variable total_expenses and total_earnings\n\n\nClick to show/hide the code\nfinjournal <- fin_journal %>%\n  \n  # create new column for total expenses\n  mutate(total_expenses = sum(Education, Food, Recreation, Shelter)) %>%\n  \n  # create new column for total earnings\n  mutate(total_earnings = sum(Wage, RentAdjustment)) %>%  \n\n  # create new column for total earnings\n  mutate(total_savings = sum(total_earnings, total_expenses))  \n\n  # convert all values to absolute values\n  # select(where(is.numeric)) %>%\n  # abs()\n  \nfinjournal\n\n\n# A tibble: 10,691 × 11\n# Groups:   participantId, yearmon [10,691]\n   participantId yearmon Education  Food Recreation Shelter   Wage\n           <int> <chr>       <dbl> <dbl>      <dbl>   <dbl>  <dbl>\n 1             0 2022-03     -38.0 -268.     -349.    -555. 11932.\n 2             0 2022-04     -38.0 -266.     -219.    -555.  8637.\n 3             0 2022-05     -38.0 -265.     -383.    -555.  9048.\n 4             0 2022-06     -38.0 -257.     -466.    -555.  9048.\n 5             0 2022-07     -38.0 -270.    -1070.    -555.  8637.\n 6             0 2022-08     -38.0 -262.     -314.    -555.  9459.\n 7             0 2022-09     -38.0 -256.     -295.    -555.  9048.\n 8             0 2022-10     -38.0 -267.      -25.0   -555.  8637.\n 9             0 2022-11     -38.0 -261.     -377.    -555.  9048.\n10             0 2022-12     -38.0 -266.     -357.    -555.  9048.\n# ℹ 10,681 more rows\n# ℹ 4 more variables: RentAdjustment <dbl>, total_expenses <dbl>,\n#   total_earnings <dbl>, total_savings <dbl>\n\n\nshould i create another column for total savings? earnings-expenses"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis",
    "title": "Take-home Exercise 1",
    "section": "4.1 Exploratory Data Analysis",
    "text": "4.1 Exploratory Data Analysis\n\n4.1.1 Distribution of participants by age\n\n\nClick to show/hide the code\nage <- plot_ly(\n  participants, \n  x = ~age, \n  type = \"histogram\", \n  nbinsx = 10, \n  marker = list(color = 'rgb(158,202,225)',\n                line = list(color = 'rgb(8,48,107)', \n                            width = 1.5))) %>%\n  layout(title = \"Distribution of participants' age\",\n         xaxis = list(title = \"Age\",\n                      zeroline = TRUE,\n                      range = c(15, 65)),\n         yaxis = list(title = \"Count\"))\n\nage\n\n\n\n\n\n\n\nInsights:\nThere is a relatively even distribution of participants’ ages between 20-59 years old, with the smallest number of participants being those who are 60 years old and above (23 participants) and those aged 15-19 (48 participants). The age group with the highest number of participants is the 30-34 age range, which has 130 participants.\n\n\n4.1.2 Distribution of participants\n\nInterest groups by ageEducation level by age\n\n\nThe code\n\n\nClick to show/hide the code\nggplot(participants, \n       aes(x = age, \n           y = interestGroup)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = alpha(\"#7097BB\", 0.5),\n    color = \"white\") +\n  scale_x_continuous(\n    name = \"Age\",\n    expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\nThe plot\n\n\n\n\n\n\n\nThe code\n\n\nClick to show/hide the code\nggplot(participants, \n       aes(x = age, \n           y = educationLevel)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = alpha(\"#800020\", 0.5),\n    color = \"white\") +\n  scale_x_continuous(\n    name = \"Age\",\n    expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\nThe plot\n\n\n\n\n\n\n\n\n\n\n4.1.3 Proportion of participants\n\n\nClick to show/hide the code\nfig <- plot_ly()\n\nfig <- fig %>% \n  add_pie(data = count(participants, educationLevel), \n          labels = ~educationLevel, \n          values = ~n,\n          name = \"Education level\",\n          title = \"Education Level\",\n          domain = list(row = 0, column = 0))\n                      \nfig <- fig %>% \n  add_pie(data = count(participants, householdSize), \n          labels = ~householdSize, \n          values = ~n,\n          name = \"Household size\", \n          title = \"Household size\",\n          domain = list(row = 0, column = 1))\n                       \nfig <- fig %>% \n  add_pie(data = count(participants, haveKids), \n          labels = ~haveKids, \n          values = ~n,\n          name = \"Have Kids\",\n          title = \"Have kids\",\n          domain = list(row = 0, column = 2))\n\nfig <- fig %>% layout(title = \"Proportion of participants\", showlegend = F,\n                      grid = list(rows=1, columns=3),\n                      xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),\n                      yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))\n\nfig\n\n\n\n\n\n\nInsights:\n\nMost participants in the city of Engagement are highly educated, with only 8.31% of the participants surveyed having a low level of education.\nHousehold sizes of the participants are relatively small, with more than 2/3 of the participants’ household sizes being 2 or less.\nThis could be attributed to the fact that more than 2/3 of households (70.2%) do not have children.\n\nThese insights lead us to the next question: does having a high level of education result in fewer participants having children? We will explore more about this later on in section 4.2.\n\n\n4.1.4 What do the participants of the City of Engagement spend the most on?\n\n\nClick to show/hide the code\nfin_long <- fin_journal %>%\n  pivot_longer(cols = Education:Shelter, names_to = \"Category\", values_to = \"Amount\")\n\ntotal_spent <- fin_long %>% \n  group_by(Category) %>%\n  summarize(Total = sum(Amount))\n\ntotal_fig <- plot_ly(\n  total_spent, \n  x = ~Category, \n  y = ~Total,\n  color = ~Category,\n  type = \"bar\",\n  textposition = \"none\",\n  hoverinfo = \"text\",\n  text = ~paste(total_spent$Total, \" (\", scales::percent(total_spent$Total/sum(total_spent$Total)), \")\"),\n  showlegend = FALSE) %>%\n  layout(title = \"What do the participants spend the most on?\",\n         xaxis = list(title = list(text = \"Category\")),\n         yaxis = list(title = list(text = \"Total Amount Spent\")))\n\ntotal_fig\n\n\n\n\n\n\nInsights:\nMost of the participants’ expenditure is due to Shelter, which accounts for 45.9% of the total spending.\nThe category that participants spent the least on is Education, accounting for only 0.9% of the total spending."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#does-education-level-have-an-effect-on-joviality",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#does-education-level-have-an-effect-on-joviality",
    "title": "Take-home Exercise 1",
    "section": "4.1 Does education level have an effect on joviality?",
    "text": "4.1 Does education level have an effect on joviality?\n\n\nClick to show/hide the code\neducation <- plot_ly(\n  data = participants,\n  y = ~joviality,\n  color = ~educationLevel,\n  type = \"box\",\n  showlegend = FALSE,\n  boxmean = TRUE,\n  notched = TRUE) %>% \n  \n  layout(title = list(text = \"Boxplot of joviality by education level\"),\n         xaxis = list(title = list(text ='Education Level')),\n         yaxis = list(title = list(text ='Joviality')))\n\neducation\n\n\n\n\n\n\nObservations:"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#education-level-and-joviality",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#education-level-and-joviality",
    "title": "Take-home Exercise 1",
    "section": "4.1 Education level and joviality?",
    "text": "4.1 Education level and joviality?\n\n\nClick to show/hide the code\neducation <- plot_ly(\n  data = participants,\n  y = ~joviality,\n  color = ~educationLevel,\n  type = \"box\",\n  showlegend = FALSE,\n  boxmean = TRUE,\n  notched = TRUE) %>% \n  \n  layout(title = list(text = \"Boxplot of joviality by education level\"),\n         xaxis = list(title = list(text = \"Education Level\")),\n         yaxis = list(title = list(text = \"Joviality\")))\n\neducation\n\n\n\n\n\n\nInsights:\n\nAll participants seem to have similar joviality scores, regardless of education level.\nSlight increases in median and mean joviality as education level increases."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis---demographics",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis---demographics",
    "title": "Take-home Exercise 1",
    "section": "4.1 Exploratory Data Analysis - Demographics",
    "text": "4.1 Exploratory Data Analysis - Demographics\n\n4.1.1 Distribution of participants by age\n\n\nClick to show/hide the code\nage <- plot_ly(participants, x = ~age, type = \"histogram\", nbinsx = 10)\n\nage <- age %>% \n  layout(title = \"Distribution of participants' age\",\n         xaxis = list(title = \"Age\",\n                      zeroline = TRUE,\n                      range = c(15, 65)),\n         yaxis = list(title = \"Count\"))\n\nage\n\n\n\n\n\n\nInsights:\nThere is a relatively even distribution of participants’ ages between 20-59 years old, with the smallest number of participants being those who are 60 years old and above (23 participants) and those aged 15-19 (48 participants). The age group with the highest number of participants is the 30-34 age range, which has 130 participants.\n\n\n4.1.2 Distribution of participants’\n\nInterest groups by ageEducation level by age\n\n\nThe code\n\n\nClick to show/hide the code\nggplot(participants, \n       aes(x = age, \n           y = interestGroup)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = alpha(\"#7097BB\", 0.5),\n    color = \"white\") +\n  scale_x_continuous(\n    name = \"Age\",\n    expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\nThe plot\n\n\n\n\n\n\n\nThe code\n\n\nClick to show/hide the code\nggplot(participants, \n       aes(x = age, \n           y = educationLevel)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = alpha(\"#800020\", 0.5),\n    color = \"white\") +\n  scale_x_continuous(\n    name = \"Age\",\n    expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\nThe plot\n\n\n\n\n\n\n\n\n\n\n4.1.3 Proportion of participants\n\nBy education levelBy household sizeHave Kids\n\n\nThe code\n\n\nClick to show/hide the code\nedu_count = count(participants, educationLevel)\n\nedu_prop <- plot_ly(participants, labels = ~edu_count$educationLevel, values = ~edu_count$n, type = \"pie\",\n        textposition = \"inside\",\n        textinfo = \"label+percent\",\n        hoverinfo = \"text\",\n        text = ~paste(edu_count$n, \"participants\"),\n        showlegend = FALSE) %>%\n  layout(title = \"Proportion of participants by education level\")\n\nedu_prop\n\n\nThe plot\n\n\n\n\n\n\n\n\nThe code\n\n\nClick to show/hide the code\nhhld_count = count(participants, householdSize)\n\nhhld_prop <- plot_ly(participants, labels = ~hhld_count$householdSize, values = ~hhld_count$n, type = \"pie\",\n        textposition = \"inside\",\n        textinfo = \"label+percent\",\n        hoverinfo = \"text\",\n        text = ~paste(\"Number of households =\", hhld_count$n),\n        showlegend = FALSE) %>%\n  layout(title = \"Proportion of participants by household size\")\n\nhhld_prop\n\n\nThe plot\n\n\n\n\n\n\n\n\nThe code\n\n\nClick to show/hide the code\nkids_count = count(participants, haveKids)\n\nkids_prop <- plot_ly(participants, labels = ~kids_count$haveKids, values = ~kids_count$n, type = \"pie\",\n        textposition = \"inside\",\n        textinfo = \"label+percent\",\n        hoverinfo = \"text\",\n        text = ~paste(\"Number of households with kids =\", kids_count$n),\n        showlegend = FALSE) %>%\n  layout(title = \"Proportion of participants whose households have kids\")\n\nkids_prop\n\n\nThe plot\n\n\n\n\n\n\n\n\n\nInsights:\n\nMost participants in the city of Engagement are highly educated, with only 8.31% of the participants surveyed having a low level of education.\nHousehold sizes of the participants are relatively small, with more than 2/3 of the participants’ household sizes being 2 or less.\nThis could be attributed to the fact that more than 2/3 of households (70.2%) do not have children.\n\nThese insights lead us to the next question: does having a high level of education result in fewer participants having children?"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-interest-groups-by-age",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-interest-groups-by-age",
    "title": "Take-home Exercise 1",
    "section": "Distribution of interest groups by age",
    "text": "Distribution of interest groups by age\nThe code\n\n\nClick to show/hide the code\nggplot(participants, \n       aes(x = age, \n           y = interestGroup)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = alpha(\"#7097BB\", 0.5),\n    color = \"white\") +\n  scale_x_continuous(\n    name = \"Age\",\n    expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\nThe plot"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#is-age-correlated-with-joviality",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#is-age-correlated-with-joviality",
    "title": "Take-home Exercise 1",
    "section": "Is age correlated with joviality?",
    "text": "Is age correlated with joviality?\n\n\nClick to show/hide the code\nggscatterstats(\n  data = participants,\n  x = age,\n  y = joviality, \n  bins = 20) +\n  theme_minimal()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#does-spending-more-on-recreation-make-people-happier",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#does-spending-more-on-recreation-make-people-happier",
    "title": "Take-home Exercise 1",
    "section": "Does spending more on recreation make people happier?",
    "text": "Does spending more on recreation make people happier?"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#does-earning-more-make-people-happier",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#does-earning-more-make-people-happier",
    "title": "Take-home Exercise 1",
    "section": "Does earning more make people happier?",
    "text": "Does earning more make people happier?"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#spending-patterns",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#spending-patterns",
    "title": "Take-home Exercise 1",
    "section": "spending patterns",
    "text": "spending patterns"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#total-spending-over-the-year-and-total-earnings-over-the-year-animated-plot",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#total-spending-over-the-year-and-total-earnings-over-the-year-animated-plot",
    "title": "Take-home Exercise 1",
    "section": "total spending over the year and total earnings over the year animated plot",
    "text": "total spending over the year and total earnings over the year animated plot"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis---financial",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#exploratory-data-analysis---financial",
    "title": "Take-home Exercise 1",
    "section": "4.2 Exploratory Data Analysis - Financial",
    "text": "4.2 Exploratory Data Analysis - Financial\n\n4.2.1 What do the participants of the City of Engagement spend the most on?\n\n\nClick to show/hide the code\nfin_long <- fin_journal %>%\n  pivot_longer(cols = Education:Shelter, names_to = \"Category\", values_to = \"Amount\")\n\ntotal_spent <- fin_long %>% \n  group_by(Category) %>%\n  summarize(Total = sum(Amount))\n\ntotal_fig <- plot_ly(\n  total_spent, \n  x = ~Category, \n  y = ~Total,\n  color = ~Category,\n  type = \"bar\",\n  textposition = \"none\",\n  hoverinfo = \"text\",\n  text = ~paste(total_spent$Total, \" (\", scales::percent(total_spent$Total/sum(total_spent$Total)), \")\"),\n  showlegend = FALSE) %>%\n  layout(title = \"What do the participants spend the most on?\",\n         xaxis = list(title = list(text = \"Category\")),\n         yaxis = list(title = list(text = \"Total Amount Spent\")))\n\ntotal_fig\n\n\n\n\n\n\nInsights:\n\nMost of the participants’ expenditure is due to Shelter, which accounts for 45.9% of the total spending.\nThe category that participants spent the least on is Education, accounting for only 0.9% of the total spending."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-education-level-by-age",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#distribution-of-education-level-by-age",
    "title": "Take-home Exercise 1",
    "section": "Distribution of education level by age",
    "text": "Distribution of education level by age\nThe code\n\n\nClick to show/hide the code\nggplot(participants, \n       aes(x = age, \n           y = educationLevel)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = alpha(\"#800020\", 0.5),\n    color = \"white\") +\n  scale_x_continuous(\n    name = \"Age\",\n    expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\nThe plot\n\n\nClick to show/hide the code\nggplot(participants, \n       aes(x = age, \n           y = educationLevel)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = alpha(\"#800020\", 0.5),\n    color = \"white\") +\n  scale_x_continuous(\n    name = \"Age\",\n    expand = c(0, 0)) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#confirmatory-data-analysis---demographics",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#confirmatory-data-analysis---demographics",
    "title": "Take-home Exercise 1",
    "section": "4.2 Confirmatory Data Analysis - Demographics",
    "text": "4.2 Confirmatory Data Analysis - Demographics\n\n4.2.1 Is education level associated with having kids?\nIn order to find out if there really is an association between education level and having kids, the following hypotheses will be tested at 95% confidence level:\n\n\n\n\n\n\nNote\n\n\n\n\nH0: There is no significant association between education level and having kids.\nH1: The association between education level and having kids is statistically significant.\n\n\n\n\n\nClick to show/hide the code\nset.seed(123)\n\n# creating a plot\nhave_kids <- ggbarstats(\n  participants, \n  x = haveKids, \n  y = educationLevel,\n  xlab = \"Education level\",\n  ylab = \"Percentage\",\n  type = \"np\",\n  title = \"Is there an association between education level and having kids?\")\n\n# looking at the plot\nhave_kids\n\n\n\n\n\nBased on the Pearson’s chi-square test results, the p-value of 5.91e-03 is lower than the alpha value of 0.05. Thus, there is sufficient evidence to reject the null hypothesis and conclude that there is a statistically significant association between education level and households with kids.\nVisually as seen from the graph, we can observe that as education levels increase, the proportion of participants’ households with kids decreases.\n\n\n4.1.4 Does education level affect joviality?\nAre people with higher education levels happier, or is there no difference in joviality regardless of education level? To find out, a one-way ANOVA test is done on the following hypotheses at a confidence level of 95%:\n\n\n\n\n\n\nNote\n\n\n\n\nH0: There is no difference among group means.\nH1: There is a difference among group means.\n\n\n\n\n\nClick to show/hide the code\nedu_jov <- ggbetweenstats(\n  data = participants,\n  x = educationLevel,\n  y = joviality,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE)\n\nedu_jov\n\n\n\n\n\nAs the p-value of 0.70 is higher than the alpha value of 0.05, we accept the null hypothesis as there is sufficient evidence to conclude that the means among the different education levels are the same. Therefore, education level does not really affect joviality.\n\n\n4.1.5 Is age correlated with joviality?\n\n\nClick to show/hide the code\nggscatterstats(\n  data = participants,\n  x = age,\n  y = joviality, \n  bins = 20)\n\n\n\n\n\nInsights:\nThe data points deviate greatly from the best fit line, indicating that there is no correlation between age and joviality.\n\n\nDoes spending more on recreation make people happier?\n\n\nDoes earning more make people happier?\n\n\nspending patterns\n\n\ntotal spending over the year and total earnings over the year animated plot"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#confirmatory-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#confirmatory-data-analysis",
    "title": "Take-home Exercise 1",
    "section": "4.2 Confirmatory Data Analysis",
    "text": "4.2 Confirmatory Data Analysis\n\n4.2.1 Is education level associated with having kids?\nIn order to find out if there really is an association between education level and having kids, the following hypotheses will be tested at 95% confidence level:\n\n\n\n\n\n\nNote\n\n\n\n\nH0: There is no significant association between education level and having kids.\nH1: The association between education level and having kids is statistically significant.\n\n\n\n\n\nClick to show/hide the code\nset.seed(123)\n\n# creating a plot\nhave_kids <- ggbarstats(\n  participants, \n  x = haveKids, \n  y = educationLevel,\n  xlab = \"Education level\",\n  ylab = \"Percentage\",\n  type = \"np\",\n  title = \"Is there an association between education level and having kids?\")\n\n# looking at the plot\nhave_kids\n\n\n\n\n\nBased on the Pearson’s chi-square test results, the p-value of 5.91e-03 is lower than the alpha value of 0.05. Thus, there is sufficient evidence to reject the null hypothesis and conclude that there is a statistically significant association between education level and households with kids.\nVisually as seen from the graph, we can observe that as education levels increase, the proportion of participants’ households with kids decreases.\n\n\n4.2.2 Does education level affect joviality?\nAre people with higher education levels happier, or is there no difference in joviality regardless of education level? To find out, a one-way ANOVA test is done on the following hypotheses at a confidence level of 95%:\n\n\n\n\n\n\nNote\n\n\n\n\nH0: There is no difference among group means.\nH1: There is a difference among group means.\n\n\n\n\n\nClick to show/hide the code\nedu_jov <- ggbetweenstats(\n  data = participants,\n  x = educationLevel,\n  y = joviality,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE,\n  xlab = \"Education level\",\n  ylab = \"Joviality\",\n  title = \"Does education level affect joviality?\")\n\nedu_jov\n\n\n\n\n\nAs the p-value of 0.70 is higher than the alpha value of 0.05, we accept the null hypothesis as there is sufficient evidence to conclude that the means among the different education levels are the same. Therefore, education level does not really affect joviality.\n\n\n4.2.3 Does interest group affect joviality?\nSimilarly, we can perform a oneway ANOVA test at 95% confidence level to determine if there is a difference in the mean of joviality value among the different interest groups.\n\n\n\n\n\n\nNote\n\n\n\n\nH0: There is no difference among group means.\nH1: There is a difference among group means.\n\n\n\n\n\nClick to show/hide the code\nint_jov <- ggbetweenstats(\n  data = participants,\n  x = interestGroup,\n  y = joviality,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE,\n  package = \"yarrr\",\n  palette = \"info2\",\n  xlab = \"Interest group\",\n  ylab = \"Joviality\",\n  title = \"Does interest group affect joviality?\")\n\nint_jov\n\n\n\n\n\nVisually, participants in interest groups C, E and G have the higheest mean joviality values, while participants in interest group H have the lowest mean joviality values.\nHowever, with the p-value of 0.77 being higher than the alpha value of 0.05, the null hypothesis has to be rejected. There is statistically significant evidence that there is no difference in the means among the interest groups. Thus, being in certain interest groups does not affect joviality either.\n\n\n4.2.4 Is age correlated with joviality?\n\n\nClick to show/hide the code\nage_jov <- ggscatterstats(\n  data = participants,\n  x = age,\n  y = joviality, \n  xlab = \"Age\",\n  ylab = \"Joviality\",\n  title = \"Is age correlated with joviality?\")\n\nage_jov\n\n\n\n\n\nAs seen from the scatter plot, there is a very weak negative correlation between joviality and age.\n\n\n4.2.5 Does having kids affect joviality?\n\n\nClick to show/hide the code\nkids_jov <- ggbetweenstats(\n  data = participants,\n  x = haveKids,\n  y = joviality,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE,\n  xlab = \"Have Kids\",\n  ylab = \"Joviality\",\n  title = \"Does having kids affect joviality?\")\n\nkids_jov\n\n\n\n\n\n\n\nDoes spending more lead to higher jovality\n\n\nClick to show/hide the code\ntotal <- fin_journal %>% \n  group_by(participantId) %>%\n  summarise(total_exp = sum(total_expenses), total_earn = sum(total_earnings), total_save = sum(total_savings))\n\njoined <- merge(participants, total, by = \"participantId\")\n\nspend_jov <- ggscatterstats(\n  data = joined,\n  x = total_exp,\n  y = joviality, \n  xlab = \"Total spendings\",\n  ylab = \"Joviality\",\n  title = \"Is amount spent correlated with joviality?\")\n\nspend_jov\n\n\n\n\n\n\n\nClick to show/hide the code\n#Do a boxplot here to see spending\n\n\nDoes earning more lead to higher joviality"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "href": "Hands-on_Ex/Hands-on_Ex05/Hands-on_Ex05.html",
    "title": "Hands-on Exercise 5",
    "section": "",
    "text": "Click to show/hide the code\npacman::p_load(igraph, tidygraph, ggraph, visNetwork, lubridate, clock, tidyverse, graphlayouts)\n\n\n\n\n\nIn this hands-on exercise, two datasets will be used, namely GAStech_email_edge-v2.csv and GAStech_email_node.csv.\n\n\nClick to show/hide the code\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\nClick to show/hide the code\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\")\n\n\n\n\n\nUsing the glimpse() function of the dplyr package, we can examine the structure of the data.\n\n\nClick to show/hide the code\nglimpse(GAStech_edges)\n\n\nRows: 9,063\nColumns: 8\n$ source      <dbl> 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      <dbl> 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    <chr> \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    <time> 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     <chr> \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject <chr> \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel <chr> \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel <chr> \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…\n\n\n\n\nClick to show/hide the code\nGAStech_edges <- GAStech_edges %>%\n  mutate(SendDate = dmy(SentDate)) %>%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class_Ex/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Exercise 5",
    "section": "",
    "text": "Click to show/hide the code\npacman::p_load(igraph, tidygraph, ggraph, visNetwork, lubridate, clock, tidyverse, graphlayouts, jsonlite)\n\n\n\n\n\n\n\nClick to show/hide the code\nGAStech_edges <- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\nClick to show/hide the code\nGAStech_nodes <- read_csv(\"data/GAStech_email_node.csv\")"
  }
]