---
title: "Take-home Exercise 1"
author: "Lim Li Ying"
date: "2 May 2023"
edit: visual
execute: 
  warning: false
---

# 1 The Task

The objective of this exercise is to reveal the demographic and financial characteristics of the city of Engagement, using appropriate static and interactive statistical graphics methods.

This exercise requires a user-friendly and interactive solution that helps city managers and planners to explore the complex data in an engaging way and reveal hidden patterns.

# 2 The Data

There are two data sets used in this study, namely *Participants.csv* and *FinancialJournal.csv*.

*Participants.csv* consists of 1011 rows and 7 columns, and contains demographic information about the residents of the city of Engagement, as seen in the following table.

| S/N | Columns        | Description                                                                           |
|-------------------|-------------------|----------------------------------|
| 1   | participantID  | The unique ID that is assigned to each participant.                                   |
| 2   | householdSize  | The number of people living in the participant's household.                           |
| 3   | haveKids       | Whether there are any children living in the participant's household.                 |
| 4   | age            | The age of the participant at the start of the study.                                 |
| 5   | educationLevel | The education level of the participant.                                               |
| 6   | interestGroup  | The participant's primary interest group, represented by the letters A-J.             |
| 7   | joviality      | The participant's overall happiness level at the start of the study ranging from 0-1. |

*FinancialJournal.csv* has 1,513,636 rows and 4 columns, and consists of information pertaining to the participant's financial transactions, as seen in the following table.

| S/N | Columns       | Description                                                         |
|-------------------|-------------------|----------------------------------|
| 1   | participantID | The financial transaction of the participant with the specified ID. |
| 2   | timestamp     | The date and time in which the transaction was logged.              |
| 3   | category      | The category of the expense.                                        |
| 4   | amount        | The financial transaction amount.                                   |

# 3 Data Preparation

## 3.1 Installing and loading of R packages

In this exercise, the following R packages will be used:

1.  `tidyverse`: for data cleaning and manipulation.

2.  `ggiraph`: for making `ggplot2` graphics interactive.

3.  `plotly`: for plotting interactive statistical charts.

4.  `patchwork`:

5.  `knitr`: for generating a simple table using the `kable()` function

The code chunk below uses `p_load()` of the `pacman` package to check if all the packages are installed. If they are, they will then be loaded into the R environment.

```{r}
pacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse, skimr, knitr, ggstatsplot, ggridges)
```

## 3.2 Importing the data sets

To import the data *"Participants.csv"* and *"FinancialJournal.csv"* into the R environment, `read_csv()` of the `readr` package is used, as seen in the code chunks below.

```{r}
participants <- read_csv("data/Participants.csv")
```

```{r}
fin_journal <- read_csv("data/FinancialJournal.csv")
```

## 3.3 Data wrangling

### 3.3.1 Reformatting of variables

Firstly, we will examine the *participants* data set.

```{r}
head(participants)
```

**Issues:**

1.  The variables *participantID*, *householdSize* and *age* are currently formatted as `<dbl>`. These variables will have to be converted into `<int>` format.

2.  Likewise, the variable *educationLevel* will need to be converted from `<chr>` to `<fct>` format.

The aforementioned variables are reformatted into the correct type, as seen in the code chunk below.

```{r}
participants <- participants %>%
  
  # convert 'participantId', 'householdSize' and 'age' into <int> 
  mutate_at(vars('participantId', 'householdSize', 'age'), as.integer) %>%
  
  # convert 'educationLevel' to <fct>
  mutate_at(vars('educationLevel'), as.factor) %>% 
  
  # sort 'educationLevel' in order
  mutate(educationLevel = factor(educationLevel, levels = c("Low", "HighSchoolOrCollege", "Bachelors", "Graduate"))) 

participants
```

Next, we will examine the *fin_journal* data set.

```{r}
fin_journal
```

**Issues:**

1.  The *timestamp* variable is in "YYYY-MM-DD HH:MM:SS" format. A new variable *yearmon* in "YYYY-MM" format will be created to facilitate in data analysis later on.

2.  The variable *participantID* will need to be reformatted from `<dbl>` to `<int>`.

The aforementioned issues are addressed in the code chunk below.

```{r}
fin_journal <- fin_journal %>%
  
  # convert 'participantId' to <int>
  mutate_at(vars('participantId'), as.integer) %>%
  
  # create a new 'yearmon' column
  mutate(yearmon = format(as.Date(timestamp), '%Y-%m'))

fin_journal
```

### 3.3.2 Checking for missing values

`is.na()` function is used to check for any missing values in both data sets. As seen from the results below, there are no missing values present.

```{r}
sapply(participants, function(x) sum(is.na(x)))
```

```{r}
sapply(fin_journal, function(x) sum(is.na(x)))
```

### 3.3.3 Checking and removing of duplicate rows

We can use the `unique()` function to retain rows that are distinct (i.e remove all duplicate rows).

As seen in the table below, there are now 1,512,523 rows in the data set *fin_journal*, meaning 1,113 duplicate rows were removed from the data set.

```{r}
fin_journal <- unique(fin_journal)
fin_journal
```

The same check is done on *participants*, and as seen from the table below, there are no duplicate rows to be removed.

```{r}
unique(participants)
```

### 3.3.4 Converting and rounding *amount* values

To facilitate data visualization, all values will be transformed into their absolute values and rounded to two decimal places, keeping in line with the format for currency.

```{r}
# convert all values *amount* to absolute values
fin_journal$amount <- abs(fin_journal$amount)

# round all values to 2 decimal places
fin_journal$amount <- round(fin_journal$amount, digits = 2)
```

### 3.3.5 Summation of *category* amounts

Since there are several transactions of the same category for each participant within a given month, we will employ the `group_by()` and `summarise()` functions to combine all transactions of the same category by adding them up.

```{r}
fin_journal <- fin_journal %>%
  group_by(participantId, yearmon, category) %>% 
  summarise(amount = sum(amount))
```

### 3.3.6 Pivoting *category* column in *fin_journal*

The pivot_wider() function is used to generate separate columns for each transaction category.

In addition, any missing 'NaN' values are substituted with 0 to indicate that the participant had no transactions of that specific category in that particular month and year.

```{r}
fin_journal <- fin_journal %>%
  
  # pivoting the category column
  pivot_wider(names_from = category,
              values_from = amount) %>%
  
  # fill missing values with 0
  mutate_all(~replace(., is.na(.), 0))
```

### 3.3.7 Creating new variables *total_expenses*, *total_earnings* and *total_savings*

```{r}
fin_journal <- fin_journal %>%
  
  # create new column for total expenses
  mutate(total_expenses = sum(Education, Food, Recreation, Shelter)) %>%
  
  # create new column for total earnings
  mutate(total_earnings = sum(Wage, RentAdjustment)) %>%  

  # create new column for total earnings
  mutate(total_savings = (total_earnings - total_expenses))
```

### 3.3.8 Displaying of final cleaned data sets

Using the `kable()` function of the `knitr` package, the final cleaned data sets are displayed as follows:

```{r}
kable(head(participants), align = "c")
```

```{r}
kable(head(fin_journal), align = "c")
```

# 4 Data Analysis and Visualization

## 4.1 Exploratory Data Analysis 

### 4.1.1 Distribution of participants by age

```{r}
age <- plot_ly(
  participants, 
  x = ~age, 
  type = "histogram", 
  nbinsx = 10, 
  marker = list(color = 'rgb(158,202,225)',
                line = list(color = 'rgb(8,48,107)', 
                            width = 1.5))) %>%
  layout(title = "Distribution of participants' age",
         xaxis = list(title = "Age",
                      zeroline = TRUE,
                      range = c(15, 65)),
         yaxis = list(title = "Count"))

age
```

------------------------------------------------------------------------

**Insights:**

There is a relatively even distribution of participants' ages between 20-59 years old, with the smallest number of participants being those who are 60 years old and above (23 participants) and those aged 15-19 (48 participants). The age group with the highest number of participants is the 30-34 age range, which has 130 participants.

### 4.1.2 Distribution of participants

::: panel-tabset
## Interest groups by age

The code

```{r}
#| code-fold: true
#| eval: false
ggplot(participants, 
       aes(x = age, 
           y = interestGroup)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = alpha("#7097BB", 0.5),
    color = "white") +
  scale_x_continuous(
    name = "Age",
    expand = c(0, 0)) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

The plot

```{r}
#| echo: false
ggplot(participants, 
       aes(x = age, 
           y = interestGroup)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = alpha("#7097BB", 0.5),
    color = "white") +
  scale_x_continuous(
    name = "Age",
    expand = c(0, 0)) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

## Education level by age

The code

```{r}
#| code-fold: true
#| eval: false
ggplot(participants, 
       aes(x = age, 
           y = educationLevel)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = alpha("#800020", 0.5),
    color = "white") +
  scale_x_continuous(
    name = "Age",
    expand = c(0, 0)) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```

The plot

```{r}
#| echo: false
ggplot(participants, 
       aes(x = age, 
           y = educationLevel)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = alpha("#800020", 0.5),
    color = "white") +
  scale_x_continuous(
    name = "Age",
    expand = c(0, 0)) +
  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges()
```
:::

### 4.1.3 Proportion of participants

::: panel-tabset
## By education level

The code

```{r}
#| code-fold: true
#| eval: false
edu_count = count(participants, educationLevel)

edu_prop <- plot_ly(participants, labels = ~edu_count$educationLevel, values = ~edu_count$n, type = "pie",
        textposition = "inside",
        textinfo = "label+percent",
        hoverinfo = "text",
        text = ~paste(edu_count$n, "participants"),
        showlegend = FALSE) %>%
  layout(title = "Proportion of participants by education level")

edu_prop
```

The plot

```{r}
#| echo: false
edu_count = count(participants, educationLevel)

edu_prop <- plot_ly(participants, labels = ~edu_count$educationLevel, values = ~edu_count$n, type = "pie",
        textposition = "inside",
        textinfo = "label+percent",
        hoverinfo = "text",
        text = ~paste(edu_count$n, "participants"),
        showlegend = FALSE) %>%
  layout(title = "Proportion of participants by education level")

edu_prop
```

## By household size

The code

```{r}
#| code-fold: true
#| eval: false
hhld_count = count(participants, householdSize)

hhld_prop <- plot_ly(participants, labels = ~hhld_count$householdSize, values = ~hhld_count$n, type = "pie",
        textposition = "inside",
        textinfo = "label+percent",
        hoverinfo = "text",
        text = ~paste("Number of households =", hhld_count$n),
        showlegend = FALSE) %>%
  layout(title = "Proportion of participants by household size")

hhld_prop
```

The plot

```{r}
#| echo: false
hhld_count = count(participants, householdSize)

hhld_prop <- plot_ly(participants, labels = ~hhld_count$householdSize, values = ~hhld_count$n, type = "pie",
        textposition = "inside",
        textinfo = "label+percent",
        hoverinfo = "text",
        text = ~paste("Number of households =", hhld_count$n),
        showlegend = FALSE) %>%
  layout(title = "Proportion of participants by household size")

hhld_prop
```

## Have Kids

The code

```{r}
#| code-fold: true
#| eval: false
kids_count = count(participants, haveKids)

kids_prop <- plot_ly(participants, labels = ~kids_count$haveKids, values = ~kids_count$n, type = "pie",
        textposition = "inside",
        textinfo = "label+percent",
        hoverinfo = "text",
        text = ~paste("Number of households with kids =", kids_count$n),
        showlegend = FALSE) %>%
  layout(title = "Proportion of participants whose households have kids")

kids_prop
```

The plot

```{r}
#| echo: false
kids_count = count(participants, haveKids)

kids_prop <- plot_ly(participants, labels = ~kids_count$haveKids, values = ~kids_count$n, type = "pie",
        textposition = "inside",
        textinfo = "label+percent",
        hoverinfo = "text",
        text = ~paste("Number of households with kids =", kids_count$n),
        showlegend = FALSE) %>%
  layout(title = "Proportion of participants whose households have kids")

kids_prop
```
:::

**Insights:**

1.  Most participants in the city of Engagement are highly educated, with only 8.31% of the participants surveyed having a low level of education.

2.  Household sizes of the participants are relatively small, with more than 2/3 of the participants' household sizes being 2 or less.

3.  This could be attributed to the fact that more than 2/3 of households (70.2%) do not have children.

These insights lead us to the next question: does having a high level of education result in fewer participants having children? We will look into this later on at section 4.2.

### 4.1.4 What do the participants of the City of Engagement spend the most on?

```{r}
fin_long <- fin_journal %>%
  pivot_longer(cols = Education:Shelter, names_to = "Category", values_to = "Amount")

total_spent <- fin_long %>% 
  group_by(Category) %>%
  summarize(Total = sum(Amount))

total_fig <- plot_ly(
  total_spent, 
  x = ~Category, 
  y = ~Total,
  color = ~Category,
  type = "bar",
  textposition = "none",
  hoverinfo = "text",
  text = ~paste(total_spent$Total, " (", scales::percent(total_spent$Total/sum(total_spent$Total)), ")"),
  showlegend = FALSE) %>%
  layout(title = "What do the participants spend the most on?",
         xaxis = list(title = list(text = "Category")),
         yaxis = list(title = list(text = "Total Amount Spent")))

total_fig
```

**Insights:**

Most of the participants' expenditure is due to Shelter, which accounts for 45.9% of the total spending.

The category that participants spent the least on is Education, accounting for only 0.9% of the total spending.

## 4.2 Confirmatory Data Analysis 

### 4.2.1 Is education level associated with having kids?

In order to find out if there really is an association between education level and having kids, the following hypotheses will be tested at 95% confidence level:

::: callout-note
-   H~0~: There is no significant association between education level and having kids.

-   H~1~: The association between education level and having kids is statistically significant.
:::

```{r}
set.seed(123)

# creating a plot
have_kids <- ggbarstats(
  participants, 
  x = haveKids, 
  y = educationLevel,
  xlab = "Education level",
  ylab = "Percentage",
  type = "np",
  title = "Is there an association between education level and having kids?")

# looking at the plot
have_kids
```

Based on the Pearson's chi-square test results, the p-value of 5.91e-03 is lower than the alpha value of 0.05. Thus, there is sufficient evidence to reject the null hypothesis and conclude that there is a statistically significant association between education level and households with kids.

Visually as seen from the graph, we can observe that as education levels increase, the proportion of participants' households with kids decreases.

### 4.2.2 Does education level affect joviality?

Are people with higher education levels happier, or is there no difference in joviality regardless of education level? To find out, a one-way ANOVA test is done on the following hypotheses at a confidence level of 95%:

::: callout-note
-   H~0~: There is no difference among group means.

-   H~1~: There is a difference among group means.
:::

```{r}
edu_jov <- ggbetweenstats(
  data = participants,
  x = educationLevel,
  y = joviality,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE,
  xlab = "Education level",
  ylab = "Joviality",
  title = "Does education level affect joviality?")

edu_jov
```

As the p-value of 0.70 is higher than the alpha value of 0.05, we accept the null hypothesis as there is sufficient evidence to conclude that the means among the different education levels are the same. Therefore, education level does not really affect joviality.

### 4.2.3 Does interest group affect joviality?

Similarly, we can perform a oneway ANOVA test at 95% confidence level to determine if there is a difference in the mean of joviality value among the different interest groups.

::: callout-note
-   H~0~: There is no difference among group means.

-   H~1~: There is a difference among group means.
:::

```{r}
int_jov <- ggbetweenstats(
  data = participants,
  x = interestGroup,
  y = joviality,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE,
  package = "yarrr",
  palette = "info2",
  xlab = "Interest group",
  ylab = "Joviality",
  title = "Does interest group affect joviality?")

int_jov
```

Visually, participants in interest groups C, E and G have the higheest mean joviality values, while participants in interest group H have the lowest mean joviality values.

However, with the p-value of 0.77 being higher than the alpha value of 0.05, the null hypothesis has to be rejected. There is statistically significant evidence that there is no difference in the means among the interest groups. Thus, being in certain interest groups does not affect joviality either.

### 4.2.4 Is age correlated with joviality?

```{r}
age_jov <- ggscatterstats(
  data = participants,
  x = age,
  y = joviality, 
  xlab = "Age",
  ylab = "Joviality",
  title = "Is age correlated with joviality?")

age_jov
```

As seen from the scatter plot, there is a very weak negative correlation between joviality and age.

### 4.2.5 Does having kids affect joviality?

```{r}
kids_jov <- ggbetweenstats(
  data = participants,
  x = haveKids,
  y = joviality,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE,
  xlab = "Have Kids",
  ylab = "Joviality",
  title = "Does having kids affect joviality?")

kids_jov
```

### Does spending more lead to higher jovality

```{r}
total <- fin_journal %>% 
  group_by(participantId) %>%
  summarise(total_exp = sum(total_expenses), total_earn = sum(total_earnings), total_save = sum(total_savings))

joined <- merge(participants, total, by = "participantId")

spend_jov <- ggscatterstats(
  data = joined,
  x = total_exp,
  y = joviality, 
  xlab = "Total spendings",
  ylab = "Joviality",
  title = "Is amount spent correlated with joviality?")

spend_jov
```

```{r}
#Do a boxplot here to see spending
```


Does earning more lead to higher joviality
