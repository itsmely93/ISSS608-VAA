---
title: "Take Home Exercise 2"
author: "Lim Li Ying"
date: "15 May 2023"
edit: visual
execute: 
  warning: false
---

# 1 The Task

With reference to [Mini Challenge 2 of the VAST Challenge 2023](https://vast-challenge.github.io/2023/MC2.html), the task is to use visual analytics to identify temporal patterns for individual entities and between entities in the knowledge graph FishEye created from trade records. Categorize the types of business relationship patterns you find.

# 2 The Data

The data sets were obtained from the VAST Challenge 2023 website, and includes a knowledge graph as well as 12 bundles consisting of link suggestions. As the objective states to use the knowledge graph created from trade records, only the *"mc2_challenge_graph.json"* data set will be used for the study.

# 3 Data Preparation

## 3.1 Installing and loading of R packages

In this exercise, the following R packages will be used:

1.  `tidyverse`: for data cleaning and manipulation.

2.  `lubridate`: for working with dates and time.

3.  `jsonlite`: for loading and reading of the *.json* file.

4.  `visNetwork`: for creating interactive network graphs.

5.  `ggraph`: an extension of `ggplot2` for the creation of network graphs.

The code chunk below uses `p_load()` of the *pacman* package to check if all the aforementioned packages are installed, and install the packages are yet to be installed. The packages are then loaded into the R environment.

```{r}
pacman::p_load(tidygraph, ggraph, visNetwork, lubridate, tidyverse, graphlayouts, jsonlite, igraph, plotly)
```

## 3.2 Importing and loading the data set

To import the data *"mc2_challenge_graph.json"* file into the R environment, `fromJSON()` of the *jsonlite* package is used, as seen in the code chunk below.

```{r}
MC2 <- fromJSON("data/mc2_challenge_graph.json")
```

The `glimpse()` function from the *dpylr* package is used to see a general overview of the data set.

```{r}
glimpse(MC2)
```

## 3.3 Extracting the nodes and edges

From the MC2 data set, the nodes and edges data frames are coerced into tibbles, using the `as_tibble()` function from the *tibble* package.

```{r}
MC2_nodes <- as_tibble(MC2$nodes) %>%
  select(id, rcvcountry, shpcountry)
```

```{r}
MC2_edges <- as_tibble(MC2$links) %>%
  select(source, target, arrivaldate, hscode, valueofgoods_omu, 
         volumeteu, weightkg, valueofgoodsusd) %>% 
  distinct()
```

## 3.4 Data Wrangling

### 3.4.1 Preparing of edges table

```{r}
glimpse(MC2_edges)
```

-   *arrivaldate* is currently formatted as `<chr>` data type, and needs to be converted to the `<date>` data type.

-   A new column for the year will need to be created.

The following code chunk addresses the aforementioned issues.

```{r}
MC2_edges <- MC2_edges %>%
  mutate(ArrivalDate = ymd(arrivaldate)) %>%
  mutate(Year = year(ArrivalDate))
```

Next, the attributes of the edges will need to be aggregated, following the subsequent steps:

-   Using the `filter()` function, rows whereby the hscode is 306170 will be selected.
-   They will then be aggregated by source, target, hscode and year, using the `group_by()` function.
-   A new column *Weight* (i.e. the count) will be created using the `summarise()` function.
-   The `filter()` function is used again to select rows whereby the source is not the same as the target, and the weight is greater than 20.
-   Lastly, the groups will be ungrouped using the `ungroup()` function.

```{r}
MC2_edges_aggregated <- MC2_edges %>%
  filter(hscode == "306170") %>%
  group_by(source, target, hscode, Year) %>%
  summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 20) %>%
  ungroup()
```

### 3.5.2 Preparing the nodes table

To ensure that all the nodes are present in the *source* and *target* columns of the edges table, a new nodes data table will be used by extracting the values directly from the *source* and *target* columns.

```{r}
id1 <- MC2_edges_aggregated %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted <- rbind(id1, id2) %>%
  distinct()
```

### 3.5.3 Building the tidygraph data model

```{r}
MC2_graph <- tbl_graph(nodes = MC2_nodes_extracted,
                       edges = MC2_edges_aggregated, 
                       directed = TRUE)
```

```{r}
MC2_graph
```

# 4 Network graph visualization

## 4.1 Static network graph of fishing companies from 2028 to 2034

```{r}
ggraph(MC2_graph, layout = "fr") +
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  geom_node_point() +
  theme_graph()
```

The static network graph gives us a general overview of the network, however, not much information can be included without it looking cluttered.

To get a better understanding on the relationships between the various fishing companies, an interactive network graph will be created using *visNetwork*.

## 4.2 Interactive network graph

### 4.2.1 Preparation of the edges

```{r}
edges_df <- MC2_edges %>%
  rename(from = source) %>%
  rename(to = target) %>%
  filter(hscode == "306170") %>%
  group_by(from, to, hscode, Year) %>%
  summarise(value = n()) %>%
  filter(from!=to) %>%
  filter(value > 20) %>%
  ungroup()
```

### 4.2.2 Interactive network graph of fishing companies

::: panel-tabset
## 2028

```{r}
#| code-fold: true
# filter edges by the year 2028
edges_2028 <- edges_df %>%
  filter(Year == "2028")

# extract the nodes for 2028  
id1 <- edges_2028 %>%
  select(from) %>%
  rename(id = from)
id2 <- edges_2028 %>%
  select(to) %>%
  rename(id = to)
nodes_2028 <- rbind(id1, id2) %>%
  distinct()

nodes_2028 <- nodes_2028 %>%
  mutate(label = id) 

# build tidygraph model
graph_2028 <- tbl_graph(nodes = nodes_2028,
                        edges = edges_2028,
                        directed = TRUE)

# Add degree (number of edges connected to each node) as a new column "value"
# This will change the size of the nodes according to the value
nodes_2028$value = degree(graph_2028)

# Change the color of the nodes based on centrality value using a gradient color palette
eigScalePal <- colorRampPalette(c('#9fbac9','#003049'))
nodes_2028$color <- eigScalePal(7)[cut(eigen_centrality(graph_2028)$vector, breaks = 7)]

# To customize the tooltip
nodes_2028$title = paste0("Company Name: ", nodes_2028$label)

visNetwork(nodes_2028,
           edges_2028,
           width = "100%",
           main = "Network of fishing companies in 2028") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = list(enabled = T, hover = T),
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)
```

Insights:

It can be observed that while there is one main network, there are 11 other clusters of fishing companies that are not part of the main network. In these 11 clusters, the target of shipments only receives them from one or two sources, while the sources themselves exclusively send their products to a single target.

```{r}
#| code-fold: true
# preparing the data for plotting
edges_2028 <- edges_2028 %>%
  gather(key = "column", value = "combined", from, to) %>%
  mutate(column_type = ifelse(column == "from", "from", "to")) %>%
  group_by(combined, column_type) %>%
  summarise(count = n()) %>%
  ungroup()

# customizing the tooltip
text <- paste0("Company: ", edges_2028$combined, "\nCount: ", edges_2028$count)

# plotting the grouped bar chart
g <- ggplot(edges_2028, aes(x = combined, y = count, fill = column_type, text = text)) +
  geom_col() +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())

ggplotly(g, tooltip = "text") %>%
  layout(plot_bgcolor='#e5ecf6',   
         xaxis = list(
           title='Fishing company',
           zerolinecolor = '#ffff',
           zerolinewidth = 2,
           gridcolor = 'ffff'),
         yaxis = list(
           title='Count',
           zerolinecolor = '#ffff',
           zerolinewidth = 2,
           gridcolor = 'ffff'),
         title = "Distribution of fishing companies in 2028",
         legend = list(title = list(text = NULL))) 
```

## 2030

```{r}
#| code-fold: true
edges_2030 <- edges_df %>%
  filter(Year == "2030")

id1 <- edges_2030 %>%
  select(from) %>%
  rename(id = from)
id2 <- edges_2030 %>%
  select(to) %>%
  rename(id = to)
nodes_2030 <- rbind(id1, id2) %>%
  distinct()

nodes_2030 <- nodes_2030 %>%
  mutate(label = id) 

graph_2030 <- tbl_graph(nodes = nodes_2030,
                        edges = edges_2030,
                        directed = TRUE)

nodes_2030$value = degree(graph_2030)
eigScalePal <- colorRampPalette(c('#9fbac9','#003049'))
nodes_2030$color <- eigScalePal(7)[cut(eigen_centrality(graph_2030)$vector, breaks = 7)]
nodes_2030$title = paste0("Company Name: ", nodes_2030$label)


visNetwork(nodes_2030,
           edges_2030,
           width = "100%", 
           main = "Network of fishing companies in 2030") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = list(enabled = T, hover = T),
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123) 
```

```{r}
#| code-fold: true
# preparing the data for plotting
edges_2030 <- edges_2030 %>%
  gather(key = "column", value = "combined", from, to) %>%
  mutate(column_type = ifelse(column == "from", "from", "to")) %>%
  group_by(combined, column_type) %>%
  summarise(count = n()) %>%
  ungroup()

# customizing the tooltip
text <- paste0("Company: ", edges_2030$combined, "\nCount: ", edges_2030$count)

# plotting the grouped bar chart
g <- ggplot(edges_2030, aes(x = combined, y = count, fill = column_type, text = text)) +
  geom_col() +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())

ggplotly(g, tooltip = "text") %>%
  layout(plot_bgcolor='#e5ecf6',   
         xaxis = list(
           title='Fishing company',
           zerolinecolor = '#ffff',
           zerolinewidth = 2,
           gridcolor = 'ffff'),
         yaxis = list(
           title='Count',
           zerolinecolor = '#ffff',
           zerolinewidth = 2,
           gridcolor = 'ffff'),
         title = "Distribution of fishing companies in 2030",
         legend = list(title = list(text = NULL))) 
```

## 2032

```{r}
#| code-fold: true
edges_2032 <- edges_df %>%
  filter(Year == "2032")

id1 <- edges_2032 %>%
  select(from) %>%
  rename(id = from)
id2 <- edges_2032 %>%
  select(to) %>%
  rename(id = to)
nodes_2032 <- rbind(id1, id2) %>%
  distinct()

nodes_2032 <- nodes_2032 %>%
  mutate(label = id) 

graph_2032 <- tbl_graph(nodes = nodes_2032,
                        edges = edges_2032, 
                        directed = TRUE)

nodes_2032$value = degree(graph_2032)
eigScalePal <- colorRampPalette(c('#9fbac9','#003049'))
nodes_2032$color <- eigScalePal(7)[cut(eigen_centrality(graph_2032)$vector, breaks = 7)]
nodes_2032$title = paste0("Company Name: ", nodes_2032$label)

visNetwork(nodes_2032,
           edges_2032,
           width = "100%", 
           main = "Network of fishing companies in 2032") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = list(enabled = T, hover = T),
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123) 
```

```{r}
#| code-fold: true
# preparing the data for plotting
edges_2032 <- edges_2032 %>%
  gather(key = "column", value = "combined", from, to) %>%
  mutate(column_type = ifelse(column == "from", "from", "to")) %>%
  group_by(combined, column_type) %>%
  summarise(count = n()) %>%
  ungroup()

# customizing the tooltip
text <- paste0("Company: ", edges_2032$combined, "\nCount: ", edges_2032$count)

# plotting the grouped bar chart
g <- ggplot(edges_2032, aes(x = combined, y = count, fill = column_type, text = text)) +
  geom_col() +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())

ggplotly(g, tooltip = "text") %>%
  layout(plot_bgcolor='#e5ecf6',   
         xaxis = list(
           title='Fishing company',
           zerolinecolor = '#ffff',
           zerolinewidth = 2,
           gridcolor = 'ffff'),
         yaxis = list(
           title='Count',
           zerolinecolor = '#ffff',
           zerolinewidth = 2,
           gridcolor = 'ffff'),
         title = "Distribution of fishing companies in 2032",
         legend = list(title = list(text = NULL))) 
```

## 2034

```{r}
#| code-fold: true
edges_2034 <- edges_df %>%
  filter(Year == "2034")

id1 <- edges_2034 %>%
  select(from) %>%
  rename(id = from)
id2 <- edges_2034 %>%
  select(to) %>%
  rename(id = to)
nodes_2034 <- rbind(id1, id2) %>%
  distinct()

nodes_2034 <- nodes_2034 %>%
  mutate(label = id) 

graph_2034 <- tbl_graph(nodes = nodes_2034,
                        edges = edges_2034, 
                        directed = TRUE)

nodes_2034$value = degree(graph_2034)
eigScalePal <- colorRampPalette(c('#9fbac9','#003049'))
nodes_2034$color <- eigScalePal(7)[cut(eigen_centrality(graph_2034)$vector, breaks = 7)]
nodes_2030$title = paste0("Company Name: ", nodes_2030$label)

visNetwork(nodes_2034,
           edges_2034,
           width = "100%", 
           main = "Network of fishing companies in 2034") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = list(enabled = T, hover = T),
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123) 
```

```{r}
#| code-fold: true
# preparing the data for plotting
edges_2034 <- edges_2034 %>%
  gather(key = "column", value = "combined", from, to) %>%
  mutate(column_type = ifelse(column == "from", "from", "to")) %>%
  group_by(combined, column_type) %>%
  summarise(count = n()) %>%
  ungroup()

# customizing the tooltip
text <- paste0("Company: ", edges_2034$combined, "\nCount: ", edges_2034$count)

# plotting the grouped bar chart
g <- ggplot(edges_2034, aes(x = combined, y = count, fill = column_type, text = text)) +
  geom_col() +
  theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())

ggplotly(g, tooltip = "text") %>%
  layout(plot_bgcolor='#e5ecf6',   
         xaxis = list(
           title='Fishing company',
           zerolinecolor = '#ffff',
           zerolinewidth = 2,
           gridcolor = 'ffff'),
         yaxis = list(
           title='Count',
           zerolinecolor = '#ffff',
           zerolinewidth = 2,
           gridcolor = 'ffff'),
         title = "Distribution of fishing companies in 2034",
         legend = list(title = list(text = NULL))) 
```
:::
