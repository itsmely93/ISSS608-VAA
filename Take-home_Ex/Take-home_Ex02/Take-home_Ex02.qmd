---
title: "Take Home Exercise 2"
author: "Lim Li Ying"
date: "15 May 2023"
edit: visual
execute: 
  warning: false
---

# 1 The Task

With reference to [Mini Challenge 2 of the VAST Challenge 2023](https://vast-challenge.github.io/2023/MC2.html), the task is to use visual analytics to identify temporal patterns for individual entities and between entities in the knowledge graph FishEye created from trade records. Categorize the types of business relationship patterns you find.

# 2 The Data

The data sets were obtained from the VAST Challenge 2023 website, and includes a knowledge graph as well as 12 bundles consisting of link suggestions. As the objective states to use the knowledge graph created from trade records, only the *"mc2_challenge_graph.json"* data set will be used for the study.

# 3 Data Preparation

## 3.1 Installing and loading of R packages

In this exercise, the following R packages will be used:

1.  `tidyverse`: for data cleaning and manipulation.

2.  `lubridate`: for working with dates and time.

3.  `jsonlite`: for loading and reading of the *.json* file.

4.  `visNetwork`: for creating interactive network graphs.

5.  `ggraph`: an extension of `ggplot2` for the creation of network graphs.

6.  `igraph`: for network analysis and visualisation.

7.  `plotly`: for creating interactive plots.

The code chunk below uses `p_load()` of the *pacman* package to check if all the aforementioned packages are installed, and install the packages are yet to be installed. The packages are then loaded into the R environment.

```{r}
pacman::p_load(tidygraph, ggraph, visNetwork, lubridate, tidyverse, jsonlite, igraph, plotly)
```

## 3.2 Importing and loading the data set

To import the data *"mc2_challenge_graph.json"* file into the R environment, `fromJSON()` of the *jsonlite* package is used, as seen in the code chunk below.

```{r}
MC2 <- fromJSON("data/mc2_challenge_graph.json")
```

The `glimpse()` function from the *dpylr* package is used to see a general overview of the data set.

```{r}
glimpse(MC2)
```

## 3.3 Extracting the nodes and edges

From the MC2 data set, the nodes and edges data frames are coerced into tibbles, using the `as_tibble()` function from the *tibble* package.

```{r}
MC2_nodes <- as_tibble(MC2$nodes) %>%
  select(id, rcvcountry, shpcountry)
```

```{r}
MC2_edges <- as_tibble(MC2$links) %>%
  select(source, target, arrivaldate, hscode, valueofgoods_omu, 
         volumeteu, weightkg, valueofgoodsusd) %>% 
  distinct()
```

## 3.4 Data Wrangling

### 3.4.1 Preparing of edges table

```{r}
glimpse(MC2_edges)
```

-   *arrivaldate* is currently formatted as `<chr>` data type, and needs to be converted to the `<date>` data type.

-   New columns for the month and year will need to be created.

The following code chunk addresses the aforementioned issues.

```{r}
MC2_edges <- MC2_edges %>%
  mutate(ArrivalDate = ymd(arrivaldate)) %>%
  mutate(Month = month(ArrivalDate, label = TRUE)) %>%
  mutate(Year = year(ArrivalDate))
```

Next, the attributes of the edges will need to be aggregated, following the subsequent steps:

-   Using the `filter()` function, rows whereby the hscode is 306170 will be selected.
-   They will then be aggregated by source, target, hscode and year, using the `group_by()` function.
-   A new column *Weight* (i.e. the count) will be created using the `summarise()` function.
-   The `filter()` function is used again to select rows whereby the source is not the same as the target, and the weight is greater than 20.
-   Lastly, the groups will be ungrouped using the `ungroup()` function.

```{r}
MC2_edges_aggregated <- MC2_edges %>%
  filter(hscode == "306170") %>%
  group_by(source, target, hscode, Year) %>%
  summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 20) %>%
  ungroup()
```

### 3.5.2 Preparing the nodes table

To ensure that all the nodes are present in the *source* and *target* columns of the edges table, a new nodes data table will be used by extracting the values directly from the *source* and *target* columns.

```{r}
id1 <- MC2_edges_aggregated %>%
  select(source) %>%
  rename(id = source)
id2 <- MC2_edges_aggregated %>%
  select(target) %>%
  rename(id = target)
MC2_nodes_extracted <- rbind(id1, id2) %>%
  distinct()
```

### 3.5.3 Building the tidygraph data model

```{r}
MC2_graph <- tbl_graph(nodes = MC2_nodes_extracted,
                       edges = MC2_edges_aggregated, 
                       directed = TRUE)
```

```{r}
MC2_graph
```

# 4 Exploratory Data Analysis

## 4.1 Distribution of edges by year

```{r}
# preparing the data for plotting (deriving the total count per year)
yearly_edges <- MC2_edges %>%
  group_by(hscode, Year) %>%
  filter(hscode == "306170") %>%
  count(Year)

# plotting the chart
fig <- plot_ly(x = ~Year, y = ~n, data = yearly_edges, type = "bar",
               text = paste0("Year: ", yearly_edges$Year, "\nNumber of edges: ",  yearly_edges$n), 
             hoverinfo = "text",
             textposition = "none") %>%
    layout(yaxis = list(title = "Number of edges",
                      zerolinecolor = '#ffff',
                      zerolinewidth = 2,
                      gridcolor = '#ffff'),
         xaxis = list(title = "Year",
                      zerolinecolor = '#ffff',
                      zerolinewidth = 2,
                      gridcolor = '#ffff'),
         title = "Total number of edges by year from 2028-2034",
         plot_bgcolor='#e5ecf6',
         showlegend = FALSE)

fig
```

**Insights:**

-   The number of fishing trades demonstrates an upward trend over the years, rising from 15,263 edges in 2028 to nearly doubling at 27,047 edges by 2034.

## 4.2 Distribution of edges by months

```{r}
# preparing the data for plotting
monthly_edges <- MC2_edges %>%
  filter(hscode == "306170") %>%
  group_by(Month, Year) %>%
  summarise(avg_count = n()) %>%
  group_by(Month) %>%
  summarise(avg_count = round(mean(avg_count), digits = 0))

# plotting the chart  
fig <- plot_ly(x = ~Month, y = ~avg_count, data = monthly_edges, type = "bar",
               color= ~Month,
               text = paste0("Month: ", monthly_edges$Month, "\nAverage number of edges: ", monthly_edges$avg_count),
               hoverinfo = "text",
               textposition = "none") %>%
    layout(yaxis = list(title = "Average number of edges",
                      zerolinecolor = '#ffff',
                      zerolinewidth = 2,
                      gridcolor = '#ffff'),
         xaxis = list(title = "Month",
                      zerolinecolor = '#ffff',
                      zerolinewidth = 2,
                      gridcolor = '#ffff'),
         title = "Average number of edges by month from 2028-2034",
         plot_bgcolor='#e5ecf6',
         showlegend = FALSE)

fig
```

**Insights:**

-   Fishing trades occur more frequently in Q3 to Q4 (i.e. July to December), with the highest number of trades occurring in the month of October (2303 edges on average).

-   The lowest number of trades occur in February, with only an average of 1387 edges.

## 4.2.3 Proportion of source and target by year

```{r}
total_sources <- MC2_edges_aggregated %>%
  group_by(Year) %>%
  summarise(total_sources = n_distinct(source))

total_targets <- MC2_edges_aggregated %>%
  group_by(Year) %>%
  summarise(total_targets = n_distinct(target))

total <- merge(total_sources, total_targets, by = "Year")

total <- total %>%
  mutate(total = total_sources + total_targets) %>%
  mutate(source_prop = round(total_sources/total * 100, digits = 0), target_prop = round(total_targets/total * 100), digits = 0)

fig <- plot_ly(data = total,
        x = ~Year,
        y = ~source_prop,
        type = "bar",
        name = "Source",
        hoverinfo = "text",
        text = ~paste0("Source in ", Year, "<br>Number of distinct sources: ", total_sources, "<br>Proportion: ", source_prop,"%"),
        textposition = 'none',
        marker = list(color = "darkseagreen")) %>%
    add_trace(y = ~target_prop,
              name = "Target",
              hoverinfo = "text",
              text = ~paste0("Target in ", Year, "<br>Number of distinct targets: ", total_targets, "<br>Proportion: ", target_prop,"%"),
              textposition = 'none',
              marker = list(color = "salmon")) %>%
    layout(title = "Yearly proportion of source and target",
           xaxis = list(title = "Year",
                        zerolinecolor = '#ffff',
                        zerolinewidth = 2,
                        gridcolor = '#ffff'),
           yaxis = list(title = "Percentage",
                        zerolinecolor = '#ffff',
                        zerolinewidth = 2,
                        gridcolor = '#ffff'),
           showlegend = FALSE,
           plot_bgcolor='#e5ecf6',
           barmode = 'stack')

fig
```

**Insights**

-   There is a greater proportion of sources than target every year.

# 5 Network graph visualization

## 5.1 Static network graph of fishing companies from 2028 to 2034

```{r}
# plotting a static network graph
ggraph(MC2_graph, layout = "fr") +
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  geom_node_point() +
  theme_graph()
```

The static network graph gives us a general overview of the network, however, not much information can be included without it looking cluttered.

To get a better understanding on the relationships between the various fishing companies, an interactive network graph will be created using *visNetwork*.

## 5.2 Interactive network graph

### 5.2.1 Preparation of the edges

```{r}
edges_df <- MC2_edges %>%
  rename(from = source) %>%
  rename(to = target) %>%
  filter(hscode == "306170") %>%
  group_by(from, to, hscode, Year) %>%
  summarise(value = n()) %>%
  filter(from!=to) %>%
  filter(value > 20) %>%
  ungroup()
```

::: callout-note
-   "Source" and "target" have to be renamed as "from" and "to" respectively.

-   Instead of a "weight" column, it has to be named "value" instead.

-   The reason for the aforementioned points is because visNetwork does not recognize the terms "source", "target" and "weight", therefore they have to be renamed into something that is both recognizable by visNetwork and has the same meaning as the original names.
:::

### 5.2.2 Interactive network graph of fishing companies

::: panel-tabset
## 2028

```{r}
#| code-fold: true
# filter edges by the year 2028
edges_2028 <- edges_df %>%
  filter(Year == "2028")

# extract the nodes for 2028
id1 <- edges_2028 %>%
  select(from) %>%
  rename(id = from)
id2 <- edges_2028 %>%
  select(to) %>%
  rename(id = to)
nodes_2028 <- rbind(id1, id2) %>%
  distinct()

nodes_2028 <- nodes_2028 %>%
  mutate(label = id)

# build tidygraph model
graph_2028 <- tbl_graph(nodes = nodes_2028,
                        edges = edges_2028,
                        directed = TRUE)

# Add degree (number of edges connected to each node) as a new column "value"
# This will change the size of the nodes according to the value
nodes_2028$value = degree(graph_2028)

# Change the color of the nodes based on eigenvector centrality value 
# using a gradient color palette
eigScalePal <- colorRampPalette(c('#9fbac9','#003049'))
nodes_2028$color <- eigScalePal(7)[cut(eigen_centrality(graph_2028)$vector, breaks = 7)]

# To customize the tooltip
nodes_2028$title = paste0("Company Name: ", nodes_2028$label)

visNetwork(nodes_2028,
           edges_2028,
           width = "100%",
           main = "Network of fishing companies in 2028") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = list(enabled = T, hover = T),
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)
```

## 2029

```{r}
#| code-fold: true
edges_2029 <- edges_df %>%
  filter(Year == "2029")

id1 <- edges_2029 %>%
  select(from) %>%
  rename(id = from)
id2 <- edges_2029 %>%
  select(to) %>%
  rename(id = to)
nodes_2029 <- rbind(id1, id2) %>%
  distinct()

nodes_2029 <- nodes_2029 %>%
  mutate(label = id)

graph_2029 <- tbl_graph(nodes = nodes_2029,
                        edges = edges_2029,
                        directed = TRUE)

nodes_2029$value = degree(graph_2029)

eigScalePal <- colorRampPalette(c('#9fbac9','#003049'))
nodes_2029$color <- eigScalePal(7)[cut(eigen_centrality(graph_2029)$vector, breaks = 7)]

nodes_2029$title = paste0("Company Name: ", nodes_2029$label)

visNetwork(nodes_2029,
           edges_2029,
           width = "100%",
           main = "Network of fishing companies in 2029") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = list(enabled = T, hover = T),
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)
```

## 2030

```{r}
#| code-fold: true
edges_2030 <- edges_df %>%
  filter(Year == "2030")

id1 <- edges_2030 %>%
  select(from) %>%
  rename(id = from)
id2 <- edges_2030 %>%
  select(to) %>%
  rename(id = to)
nodes_2030 <- rbind(id1, id2) %>%
  distinct()

nodes_2030 <- nodes_2030 %>%
  mutate(label = id) 

graph_2030 <- tbl_graph(nodes = nodes_2030,
                        edges = edges_2030,
                        directed = TRUE)

nodes_2030$value = degree(graph_2030)
eigScalePal <- colorRampPalette(c('#9fbac9','#003049'))
nodes_2030$color <- eigScalePal(7)[cut(eigen_centrality(graph_2030)$vector, breaks = 7)]
nodes_2030$title = paste0("Company Name: ", nodes_2030$label)


visNetwork(nodes_2030,
           edges_2030,
           width = "100%", 
           main = "Network of fishing companies in 2030") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = list(enabled = T, hover = T),
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123) 
```

## 2031

```{r}
#| code-fold: true
edges_2031 <- edges_df %>%
  filter(Year == "2031")

id1 <- edges_2031 %>%
  select(from) %>%
  rename(id = from)
id2 <- edges_2031 %>%
  select(to) %>%
  rename(id = to)
nodes_2031 <- rbind(id1, id2) %>%
  distinct()

nodes_2031 <- nodes_2031 %>%
  mutate(label = id)

graph_2031 <- tbl_graph(nodes = nodes_2031,
                        edges = edges_2031,
                        directed = TRUE)

nodes_2031$value = degree(graph_2031)

eigScalePal <- colorRampPalette(c('#9fbac9','#003049'))
nodes_2031$color <- eigScalePal(7)[cut(eigen_centrality(graph_2031)$vector, breaks = 7)]

nodes_2031$title = paste0("Company Name: ", nodes_2031$label)

visNetwork(nodes_2031,
           edges_2031,
           width = "100%",
           main = "Network of fishing companies in 2031") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = list(enabled = T, hover = T),
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)
```

## 2032

```{r}
#| code-fold: true
edges_2032 <- edges_df %>%
  filter(Year == "2032")

id1 <- edges_2032 %>%
  select(from) %>%
  rename(id = from)
id2 <- edges_2032 %>%
  select(to) %>%
  rename(id = to)
nodes_2032 <- rbind(id1, id2) %>%
  distinct()

nodes_2032 <- nodes_2032 %>%
  mutate(label = id) 

graph_2032 <- tbl_graph(nodes = nodes_2032,
                        edges = edges_2032, 
                        directed = TRUE)

nodes_2032$value = degree(graph_2032)
eigScalePal <- colorRampPalette(c('#9fbac9','#003049'))
nodes_2032$color <- eigScalePal(7)[cut(eigen_centrality(graph_2032)$vector, breaks = 7)]
nodes_2032$title = paste0("Company Name: ", nodes_2032$label)

visNetwork(nodes_2032,
           edges_2032,
           width = "100%", 
           main = "Network of fishing companies in 2032") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = list(enabled = T, hover = T),
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123) 
```

## 2033

```{r}
#| code-fold: true
edges_2033 <- edges_df %>%
  filter(Year == "2033")

id1 <- edges_2033 %>%
  select(from) %>%
  rename(id = from)
id2 <- edges_2033 %>%
  select(to) %>%
  rename(id = to)
nodes_2033 <- rbind(id1, id2) %>%
  distinct()

nodes_2033 <- nodes_2033 %>%
  mutate(label = id)

graph_2033 <- tbl_graph(nodes = nodes_2033,
                        edges = edges_2033,
                        directed = TRUE)

nodes_2033$value = degree(graph_2033)

eigScalePal <- colorRampPalette(c('#9fbac9','#003049'))
nodes_2033$color <- eigScalePal(7)[cut(eigen_centrality(graph_2033)$vector, breaks = 7)]

nodes_2033$title = paste0("Company Name: ", nodes_2033$label)

visNetwork(nodes_2033,
           edges_2033,
           width = "100%",
           main = "Network of fishing companies in 2033") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = list(enabled = T, hover = T),
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123)
```

## 2034

```{r}
#| code-fold: true
edges_2034 <- edges_df %>%
  filter(Year == "2034")

id1 <- edges_2034 %>%
  select(from) %>%
  rename(id = from)
id2 <- edges_2034 %>%
  select(to) %>%
  rename(id = to)
nodes_2034 <- rbind(id1, id2) %>%
  distinct()

nodes_2034 <- nodes_2034 %>%
  mutate(label = id) 

graph_2034 <- tbl_graph(nodes = nodes_2034,
                        edges = edges_2034, 
                        directed = TRUE)

nodes_2034$value = degree(graph_2034)
eigScalePal <- colorRampPalette(c('#9fbac9','#003049'))
nodes_2034$color <- eigScalePal(7)[cut(eigen_centrality(graph_2034)$vector, breaks = 7)]
nodes_2030$title = paste0("Company Name: ", nodes_2030$label)

visNetwork(nodes_2034,
           edges_2034,
           width = "100%", 
           main = "Network of fishing companies in 2034") %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to") %>%
  visOptions(highlightNearest = list(enabled = T, hover = T),
             nodesIdSelection = TRUE) %>%
  visLayout(randomSeed = 123) 
```
:::

::: callout-note
-   The larger the node, the higher the degree centrality. This means that nodes that are larger in size have a higher number of edges.

-   The darker the color of the node, the higher the eigenvector centrality. A high eigenvector score means that a node is connected to many nodes who themselves have high scores.

-   The thicker the edges, the higher the weight (i.e. there is a higher number of trades between that particular source and target).
:::

**Insights:**

-   Majority the companies are either recipients are distributors.

-   Only a small minority of companies are both recipients and distributors at the same time (i.e. resellers).

    -   Ltd. Corporation Ltd. Liability Co is a reseller in 2028 and 2029, however it is worth noting that the company ceased to operate since 2030.

-   Most of the fishing companies with high degree and eigenvector centrality tend to be recipients.

    -   This means that there are more recipients with a large number of edges than there are distributors with a large number of edges.

-   Most distributors have relatively low degree and eigenvector centrality.

    -   This means that most distributors usually distribute to a small number of recipients.

-   Throughout the years, there is usually one main network and several clusters of companies that are not part of the main network. In these clusters, the target of shipments only receives them from one or two sources, while the sources themselves exclusively send their products to one or two targets.
